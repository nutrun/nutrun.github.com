<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nutrun</title>
  <subtitle>nutrun atom feed.</subtitle>
  <link href="http://nutrun.com/feed.atom" rel="self" />
  <link href="http://nutrun.com/" />
  <id>http://nutrun.com/</id>
  <updated>2010-11-17T00:00:00+00:00</updated>
  <author>
    <name>George Malamidis</name>
  </author>
  <entry>
    <title>  Supercharged ruby console output</title>
    <link href="http://nutrun.com/weblog/2010/11/17/supercharged-ruby-console-output.html" type="text/html" />
    <id>http://nutrun.com/weblog/2010/11/17/supercharged-ruby-console-output.html</id>
    <updated>2010-11-17T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 17 2010</span>
        </div>
        <h2 class="title">Supercharged ruby console output</h2>
        <p>
          <a href="https://gist.github.com/703943">https://gist.github.com/703943</a>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Sinatra reloader</title>
    <link href="http://nutrun.com/weblog/2010/06/24/sinatra-reloader.html" type="text/html" />
    <id>http://nutrun.com/weblog/2010/06/24/sinatra-reloader.html</id>
    <updated>2010-06-24T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 24 2010</span>
        </div>
        <h2 class="title">Sinatra reloader</h2>
        <p>
          When I first started using it to write web apps a couple of years ago,
          <a href="http://www.sinatrarb.com/" title="Sinatra">Sinatra</a>
          supported code reloading in development mode. That feature was dropped from the core of Sinatra at some point and we just got used to restarting the app every time we made a change whilst developing, it's not that huge an overhead, especially considering Sinatra's fast start up.
        </p>
        <p>
          I recently had to work on a Rails codebase for a while, which reminded me that code reloading without restarting in dev mode is functionality I don't mind spoiling myself with. At the time,
          <a href="http://twitter.com/abhinay" title="">Abs</a>
          pointed me to
          <a href="http://github.com/rkh/sinatra-reloader" title="rkh's sinatra-reloader at master - GitHub">sinatra-reloader</a>
          which I installed and used in a couple of apps and it works well. As I'm writing this, I'm also looking at
          <a href="http://github.com/rack/rack/blob/master/lib/rack/reloader.rb" title="lib/rack/reloader.rb at master from rack's rack - GitHub">Rack::Reloader</a>,
          which I've never used and seems somewhat different with its own set of interesting features.
          <a href="http://rtomayko.github.com/shotgun/" title="shotgun(1) - reloading rack development server">Shotgun</a>
          is out of the question for me, because it feels like manually restarting the app is faster than the time Shotgun takes to load everything per request.
        </p>
        <p>
          <a href="http://rvm.beginrescueend.com/" title="RVM: Ruby Version Manager -&#x000A;        RVM Ruby Version Manager - Documentation">RVM</a>
          has prompted me to switch between Ruby versions more often than in the past, resulting in installing gems more frequently than I used to, which in turn brings out an OCD side of me when it comes to gems that download other gems as dependencies. That's the one thing that bugs me about sinatra-reloader and since I found myself with a bit of time on my hands, I wrote my own Sinatra reloader which I've put in
          <a href="http://gist.github.com/450814" title="gist: 450814 - Code reloading for Sinatra- GitHub">this gist</a>
          in case someone else finds it useful.
        </p>
        <p>
          It works by reloading all source files and routes when it detects a change. This is less efficient than selectively reloading only code from files that have changed, although I tried it in a few of my projects without noticeable penalties. A thing to watch out for is that once a constant has been loaded, it will still be around after you delete the code that declares it. Restarting is required for such changes to take effect. I've also noticed a similar issue with classes that extend
          <code>Sequel::Model</code>
          - if I run a migration and don't restart, database field mappings don't get updated, because Sequel makes those mappings at the time
          <code>Sequel::Model</code>
          is subclassed.
        </p>
        <p>
          In summary, if you don't mind installing a bunch of gems you're likely to never use, I recommend
          <a href="http://github.com/rkh/sinatra-reloader" title="rkh's sinatra-reloader at master - GitHub">sinatra-reloader</a>.
          If you're after code reloading which you might want to customise with a couple of lines of code on the spot to suit your particular project's needs,
          <a href="http://gist.github.com/450814" title="gist: 450814 - Code reloading for Sinatra- GitHub">this</a>
          can be a starting point.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Incremental deployment</title>
    <link href="http://nutrun.com/weblog/2009/12/22/incremental-deployment.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/12/22/incremental-deployment.html</id>
    <updated>2009-12-22T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Dec 22 2009</span>
        </div>
        <h2 class="title">Incremental deployment</h2>
        <p>
          I've recently had a chance to look at a high availability system designed and built by
          <a href="http://www.forward.co.uk/" title="Forward: Connecting business with customers and people with products online">Forward</a>
          colleagues
          <a href="http://adkent.com/" title="adkent.com">Andy Kent</a>
          and
          <a href="http://oobaloo.co.uk/" title="Paul Ingles - Articles">Paul Ingles</a>.
          It is a critical web service with a very high impact of failure. Essentially, it
          <b>must</b>
          stay up at all times.
        </p>
        <p>
          The service is hosted on
          <a href="http://aws.amazon.com/ec2/" title="Amazon Elastic Compute Cloud (Amazon EC2)">Amazon EC2</a>.
          It makes use of EC2's geographically distributed regions and different availability zones within each region, fronted by
          <a href="http://aws.amazon.com/elasticloadbalancing/" title="Elastic Load Balancing">AWS Elastic Load Balancing</a>
          and additional global DNS fail over outside of EC2/AWS.
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/4206247218/" title="high-availability-arch by nutrunflickr, on Flickr">
            <img alt="high-availability-arch" height="309" src="http://farm5.static.flickr.com/4008/4206247218_4b8f165e0b_o.png" width="497" />
          </a>
        </p>
        <p>A part of the project that struck me as particularly interesting is the deployment strategy Paul and Andy settled on. Regardless of how much trust we have in our builds and QA process, deployments become a whole different, much more stressful activity when critical systems like the one under discussion are involved. Andy mentioned it is important to find the balance between what to automate and bits that should require manual input.</p>
        <pre>&#x000A;# deploy.rb&#x000A;&#x000A;task :us_1b do&#x000A;  set :region, 'us-east-1'&#x000A;  set :servers, us_1b&#x000A;  # More US 1b specific setup...&#x000A;end&#x000A;&#x000A;task :eu_1a do&#x000A;  set :region, 'eu-west-1'&#x000A;  set :servers, eu_1a&#x000A;  # More EU 1a specific setup...&#x000A;end  %p
        This service is
        <em>incrementally deployed one availability zone at a time</em>,
        e.g.
        <code>cap us_1b deploy</code>.
        Each deployment step is manual - it requires someone to push the button. This means that if something goes wrong, only part of the system will be affected, achieving significant redundancy. If the failure was severe enough to bring the system down, only one availability zone in one region will fail and the load balancers will make sure that this failure is transparent to end users and does not overall affect the entire system.</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Deployment setup automation</title>
    <link href="http://nutrun.com/weblog/2009/11/10/deployment-setup-automation.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/11/10/deployment-setup-automation.html</id>
    <updated>2009-11-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 10 2009</span>
        </div>
        <h2 class="title">Deployment setup automation</h2>
        <p>Part of my work these days has to do with building and deploying numerous experimental applications with varying life cycles. Many of these applications get built and put on a server in less than a day only to be shut down and never looked at again a couple of days later, others get turned off and revisited after some time, while others graduate to larger, wider scope systems.</p>
        <p>This means that I get to deploy applications for the first time more frequently than usual. Also, because we deploy to virtualised infrastructures (including an internal cloud, Slicehost and Amazon EC2), slice instances (servers) tend to get rebuilt more often than they would in the absence of virtualisation. First time deployments are generally more involved than subsequent ones because there is setup up to be made and software to be installed in order for the host servers to accommodate the application.</p>
        <p>One way to treat first time deployment woes is to create and maintain images of the system in the state required to host the application. I find this to work well when dealing with moderate numbers of applications and servers, whereas creating and keeping images up to date has a tendency to become tedious and inflexible as the number of applications and images increases.</p>
        <p>
          As an alternative, we can move prerequisite system setup and installations responsibility closer to the application code, in the form of an
          <code>after</code>
          hook to the
          <code>deploy:setup task</code>
          that we call the first time we deploy an application with Capistrano. Here's some Capistrano code that performs one time setup tasks.
        </p>
        <pre>&#x000A;namespace :util do&#x000A;  task :install_libraries do&#x000A;    sudo 'apt-get install libxml2 libxml2-dev libmysqlclient15-dev -y'&#x000A;  end  &#x000A;end&#x000A;&#x000A;after 'deploy:setup', 'util:install_libraries'</pre>
        <p>With this approach, the application knows how to setup the system the way it needs it to be next time it gets deployed for the first time. As an added benefit, the Capistrano code serves as documentation for the application's system requirements.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  VCS practices over features</title>
    <link href="http://nutrun.com/weblog/2009/08/29/vcs-practices-over-features.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/08/29/vcs-practices-over-features.html</id>
    <updated>2009-08-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 29 2009</span>
        </div>
        <h2 class="title">VCS practices over features</h2>
        <p>
          I've often heard people I know and respect say that
          <cite>
            <a href="http://git-scm.com/" title="Git - Fast Version Control System">git</a>
            is leaps and bounds better than
            <a href="http://subversion.tigris.org/" title="subversion.tigris.org">Subversion</a>
          </cite>.
          I've been a relatively early adopter of git, it's been my VCS of choice for almost two years now. Even though I find it superior to most of the competition I struggle to justify the "leaps and bounds" claim and would rather more modestly call it "a step forward".
        </p>
        <p>This is probably due to the practices we find benefit our development process. Git puts great emphasis on branching, something we generally tend to avoid (to clarify, I'm not referring to local branching). We concentrate on feedback based on the usage of our applications. This means that we strive to commit as often as possible and, most importantly, deploy to production at a constant rate. Grossly simplified, the process is: identify a small coherent feature, build it, commit it to the master branch and deploy. No part of the codebase is owned by a subdivision of the team, everyone works on everything.</p>
        <p>
          By far the most popular git commands we issue are
          <code>git pull</code>,
          <code>git add</code>
          and
          <code>git push</code>,
          not that different to
          <code>svn update</code>
          and
          <code>svn commit</code>.
        </p>
        <p>When I first started using git I was wondering if I had developed a fear of branching because of Subversion's inefficiencies in that area. In reality, I think that an environment where every developer constantly has an up to date understanding of the codebase and especially a current grasp of the design and overall vision will always be more efficient than working remotely and having merge checkpoints, no matter how cleverly the VCS handles branching. This is why I think a faster, distributed, superior at merging VCS is not something more dramatic than a desirable step forward.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Hello world nginx module</title>
    <link href="http://nutrun.com/weblog/2009/08/15/hello-world-nginx-module.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/08/15/hello-world-nginx-module.html</id>
    <updated>2009-08-15T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 15 2009</span>
        </div>
        <h2 class="title">Hello world nginx module</h2>
        <p>
          Several times over the past few months I made short lived attempts of delving into the mechanics of
          <a href="http://nginx.net/" title="nginx">nginx</a>
          modules. Although an invaluable resource to anyone seriously interested in the subject,
          <a href="http://www.evanmiller.org/nginx-modules-guide.html" title="Emiller's Guide to Nginx Module Development">Emiller's Guide To Nginx Module Development</a>
          doesn't at the time of this writing include a quick-start example I could hack together and see in action. Getting something to run as quickly as possible is my preferred way of starting the study of new things and every time I caught myself searching the web for a "Hello world nginx module".
        </p>
        <p>
          I will not go into any details,
          <a href="http://www.evanmiller.org/nginx-modules-guide.html" title="Emiller's Guide to Nginx Module Development">Emiller's Guide</a>
          does an excellent job at that, I'm only going to mention the steps I believe are absolutely necessary to write, compile and run an nginx handler module that responds to every request with the string "Hello world".
        </p>
        <p>
          There is a minimum of two files required for writing an nginx module, the first should be called
          <code>config</code>
          and looks something like this:
        </p>
        <pre>&#x000A;ngx_addon_name=ngx_http_hello_world_module&#x000A;HTTP_MODULES="$HTTP_MODULES ngx_http_hello_world_module"&#x000A;NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_hello_world_module.c"</pre>
        <p>
          The second is the module's implementation in C and nginx convention suggests a name like
          <code>ngx_http_modulename_module.c</code>,
          in this case
          <code>ngx_http_hello_world_module.c</code>.
        </p>
        <pre>&#x000A;#include &lt;ngx_config.h&gt;&#x000A;#include &lt;ngx_core.h&gt;&#x000A;#include &lt;ngx_http.h&gt;&#x000A;&#x000A;static char *ngx_http_hello_world(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);&#x000A;&#x000A;static ngx_command_t  ngx_http_hello_world_commands[] = {&#x000A;&#x000A;  { ngx_string("hello_world"),&#x000A;    NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,&#x000A;    ngx_http_hello_world,&#x000A;    0,&#x000A;    0,&#x000A;    NULL },&#x000A;&#x000A;    ngx_null_command&#x000A;};&#x000A;&#x000A;&#x000A;static u_char  ngx_hello_world[] = "hello world";&#x000A;&#x000A;static ngx_http_module_t  ngx_http_hello_world_module_ctx = {&#x000A;  NULL,                          /* preconfiguration */&#x000A;  NULL,                          /* postconfiguration */&#x000A;&#x000A;  NULL,                          /* create main configuration */&#x000A;  NULL,                          /* init main configuration */&#x000A;&#x000A;  NULL,                          /* create server configuration */&#x000A;  NULL,                          /* merge server configuration */&#x000A;&#x000A;  NULL,                          /* create location configuration */&#x000A;  NULL                           /* merge location configuration */&#x000A;};&#x000A;&#x000A;&#x000A;ngx_module_t ngx_http_hello_world_module = {&#x000A;  NGX_MODULE_V1,&#x000A;  &amp;ngx_http_hello_world_module_ctx, /* module context */&#x000A;  ngx_http_hello_world_commands,   /* module directives */&#x000A;  NGX_HTTP_MODULE,               /* module type */&#x000A;  NULL,                          /* init master */&#x000A;  NULL,                          /* init module */&#x000A;  NULL,                          /* init process */&#x000A;  NULL,                          /* init thread */&#x000A;  NULL,                          /* exit thread */&#x000A;  NULL,                          /* exit process */&#x000A;  NULL,                          /* exit master */&#x000A;  NGX_MODULE_V1_PADDING&#x000A;};&#x000A;&#x000A;&#x000A;static ngx_int_t ngx_http_hello_world_handler(ngx_http_request_t *r)&#x000A;{&#x000A;  ngx_buf_t    *b;&#x000A;  ngx_chain_t   out;&#x000A;&#x000A;  r-&gt;headers_out.content_type.len = sizeof("text/plain") - 1;&#x000A;  r-&gt;headers_out.content_type.data = (u_char *) "text/plain";&#x000A;&#x000A;  b = ngx_pcalloc(r-&gt;pool, sizeof(ngx_buf_t));&#x000A;&#x000A;  out.buf = b;&#x000A;  out.next = NULL;&#x000A;&#x000A;  b-&gt;pos = ngx_hello_world;&#x000A;  b-&gt;last = ngx_hello_world + sizeof(ngx_hello_world);&#x000A;  b-&gt;memory = 1;&#x000A;  b-&gt;last_buf = 1;&#x000A;&#x000A;  r-&gt;headers_out.status = NGX_HTTP_OK;&#x000A;  r-&gt;headers_out.content_length_n = sizeof(ngx_hello_world);&#x000A;  ngx_http_send_header(r);&#x000A;&#x000A;  return ngx_http_output_filter(r, &amp;out);&#x000A;}&#x000A;&#x000A;&#x000A;static char *ngx_http_hello_world(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)&#x000A;{&#x000A;  ngx_http_core_loc_conf_t  *clcf;&#x000A;&#x000A;  clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);&#x000A;  clcf-&gt;handler = ngx_http_hello_world_handler;&#x000A;&#x000A;  return NGX_CONF_OK;&#x000A;}</pre>
        <p>
          Both
          <code>config</code>
          and
          <code>ngx_http_hello_world_module.c</code>
          should be placed in the same directory, let's say
          <code>/etc/ngxhelloworld</code>.
          Modules are compiled into the nginx binary. To do so,
          <a href="http://wiki.nginx.org/NginxInstall" title="NginxInstall">download the nginx source</a>,
          uncompress, and in the nginx source directory run:
        </p>
        <pre>&#x000A;./configure --add-module=/etc/ngxhelloworld&#x000A;make&#x000A;sudo make install</pre>
        <p>
          Finally, add a module directive to nginx's configuration (default is
          <code>/usr/local/nginx/conf/nginx.conf</code>)
          to enable the module for a location.
        </p>
        <pre>&#x000A;location = /hello {&#x000A;  hello_world;&#x000A;}</pre>
        <p>
          At this point, we can start nginx and navigating to
          <code>http://localhost/hello</code>
          will yield the result of all this labor.
        </p>
        <p>
          Alongside Emiller's Guide, I also found reading
          <a href="http://wiki.nginx.org/Nginx3rdPartyModules" title="Nginx3rdPartyModules">nginx third party module</a>
          code helpful.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Asynchronous session content injection</title>
    <link href="http://nutrun.com/weblog/2009/08/06/asynchronous-session-content-injection.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/08/06/asynchronous-session-content-injection.html</id>
    <updated>2009-08-06T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 06 2009</span>
        </div>
        <h2 class="title">Asynchronous session content injection</h2>
        <p>
          Applying a clear distinction between stateless and stateful content when designing a web application is tricky but worth tackling early so that content not specific to user sessions can benefit from web caching. The technique we are trying out for
          <a href="http://www.scramble.com/" title="">scramble.com</a>
          reminds me of what I described in
          <a href="http://nutrun.com/weblog/state-separation/" title="nutrun  » Blog Archive   » State separation">State separation</a>
          and was introduced to me by
          <a href="http://www.neophiliac.net/" title="ne•o•phil•i•ac">Mike Jones</a>
          who was inspired by the
          <em>Dynamically Update Cached Pages</em>
          chapter in
          <a href="http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes" title="The Pragmatic Bookshelf | Advanced Rails Recipes">Advanced Rails Recipes</a>.
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/3794424247/" title="asynchronous-session-content-injection by nutrunflickr, on Flickr">
            <img alt="asynchronous-session-content-injection" height="242" src="http://farm3.static.flickr.com/2501/3794424247_30b0d5cc52_o.png" width="331" />
          </a>
        </p>
        <p>The idea involves serving non session specific resources independent from personalized content and use AJAX calls to inject the page with session specific content.</p>
        <pre>&#x000A;require 'rubygems'&#x000A;require 'sinatra'&#x000A;require 'json'&#x000A;&#x000A;configure do&#x000A;  enable :sessions&#x000A;end&#x000A;&#x000A;get '/' do&#x000A;  headers['Cache-Control'] = 'max-age=60, must-revalidate'&#x000A;  erb :index&#x000A;end&#x000A;&#x000A;get '/userinfo' do&#x000A;  if session[:user]&#x000A;    JSON.dump(:user =&gt; session[:user])&#x000A;  else&#x000A;    halt 401&#x000A;  end&#x000A;end&#x000A;&#x000A;get '/login' do&#x000A;  session[:user] = 'rock'&#x000A;  redirect '/'&#x000A;end&#x000A;&#x000A;get '/logout' do&#x000A;  session.clear&#x000A;  redirect '/'&#x000A;end  %p
        Notice some of the headers for
        <code>'/'</code>:</pre>
        <pre>&#x000A;$ curl -I http://localhost:4567/&#x000A;Cache-Control: max-age=60, must-revalidate&#x000A;Set-Cookie: rack.session=BAh7AA%3D%3D%0A; path=/</pre>
        <p>
          The
          <code>Cache-Control</code>
          policy instructs a web cache to keep this version of the resource for 60 seconds before requesting a fresh one.
          <code>Set-Cookie</code>
          however will usually cause a web cache to never store the response and always query its back end.
        </p>
        <p>
          The following configuration tells
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>
          to throw away the cookie from any request/response that doesn' match one of the URLs that require authorization, thus causing it to react to response cache policies.
        </p>
        <pre>&#x000A;sub vcl_recv {&#x000A;  if (req.url !~ "^(/login|/logout|/userinfo)") {&#x000A;    unset req.http.cookie;&#x000A;  }&#x000A;}&#x000A;&#x000A;sub vcl_fetch {&#x000A;  if (req.url !~ "^(/login|/logout|/userinfo)") {&#x000A;    unset obj.http.set-cookie;&#x000A;  }&#x000A;}  %p
        A snippet from the HTML response for
        <code>'/'</code>:</pre>
        <pre>&#x000A;&lt;h1&gt;Hi&lt;/h1&gt;&#x000A;&lt;div id="nav"&gt;&#x000A;  &lt;a href="/login" class='login-control'&gt;Login&lt;/a&gt;&#x000A;&lt;/div&gt;</pre>
        <p>... and the javascript for asynchronously injecting session data to the page:</p>
        <pre>&#x000A;$(function() {&#x000A;  $.getJSON('/userinfo', function(data) {&#x000A;    $('h1').text('Hi ' + data.user);&#x000A;    $('#nav .login-control').attr('href', '/logout').html('logout');&#x000A;  })&#x000A;})</pre>
        <p>In summary, it is likely that a website will have significant amounts of content that is intended for everyone without the need for personalization. The performance of serving that content can benefit from web caching, but that becomes difficult as many websites' user experience depends on the presence of user sessions. Separating stateless from session specific content at the resource level and using a combination of HTTP and AJAX to merge the results of requests for both types of resources will make stateless content cacheable by decoupling it from the unnecessary cookie dependency.</p>
        <p>
          Runnable code example :
          <a href="http://pastie.org/573878">http://pastie.org/573878</a>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rack::CacheHeaders code</title>
    <link href="http://nutrun.com/weblog/2009/05/18/rackcacheheaders-code.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/05/18/rackcacheheaders-code.html</id>
    <updated>2009-05-18T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 18 2009</span>
        </div>
        <h2 class="title">Rack::CacheHeaders code</h2>
        <p>
          A few months ago I
          <a href="http://nutrun.com/weblog/rack-cache-headers/" title="nutrun  » Blog Archive   » Rack cache headers">wrote</a>
          about a possible method for centrally configuring HTTP cache headers in
          <a href="http://rack.rubyforge.org/" title="Rack: a Ruby Webserver Interface">Rack</a>
          based web applications which I called
          <code>Rack::CacheHeaders</code>.
          This is useful if your application's architecture involves tools like
          <a href="http://www.squid-cache.org/" title="squid : Optimising Web Delivery">Squid</a>
          or
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>,
          or if you are generally interested in harvesting the numerous advantages of HTTP caching for your web application.
        </p>
        <p>
          The code has evolved a bit since and proven useful in a number of production systems. I created a
          <a href="http://gist.github.com/113441" title="gist: 113441 - GitHub">gist</a>
          of
          <code>Rack::CacheHeaders</code>
          in case someone else finds it handy. The tool is not exhaustive in terms of policies as found in the HTTP
          <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html" title="HTTP/1.1: Caching in HTTP">specs</a>,
          it's a collection of the ones we needed in the projects it's been used so far. Consider adding ones you need to the gist to make the code more complete and widely useful.
        </p>
        <p>
          <code>Rack::CacheHeaders</code>
          allows configuring HTTP cache policy response headers based on request URI patterns. For example, to set the
          <code>Cache-Control: max-age</code>
          header for a
          <code>/guitars/:id</code>
          resource to one hour:
        </p>
        <pre>&#x000A;Rack::CacheHeaders.configure do |cache|&#x000A;  cache.max_age(/^\/guitars\/d+$/, 3600)&#x000A;end</pre>
        <p>
          <a href="http://gist.github.com/113441" title="gist: 113441 - GitHub">Download/develop Rack::CacheHeaders</a>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  97 Things Every Software Architect Should Know</title>
    <link href="http://nutrun.com/weblog/2009/02/28/97-things-every-software-architect-should-know.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/02/28/97-things-every-software-architect-should-know.html</id>
    <updated>2009-02-28T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 28 2009</span>
        </div>
        <h2 class="title">97 Things Every Software Architect Should Know</h2>
        <p>
          A few months ago I wrote one of the axioms for a community effort called
          <a href="http://97-things.near-time.net/wiki" title="Home Page for 97 Things 		 [97 Things] : Near-Time">97 Things Every Software Architect Should Know</a>
          which was driven and edited by
          <a href="http://www.monson-haefel.com/" title="Monson-Haefel's Web Site">Richard Monson-Haefel</a>.
          This collection of principles, as contributed by an impressive range of software architects around the world, was recently released as a
          <a href="http://oreilly.com/catalog/9780596522698/index.html" title="97 Things Every Software Architect Should Know | O'Reilly Media">book</a>
          by
          <a href="http://oreilly.com/" title="O'Reilly Media - Spreading the knowledge of technology innovators">O'Reilly Media</a>
          and is well worth a look if you're interested in pragmatic advice based on how some of our colleagues approach technology projects.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Caching proxy fronted web consumer</title>
    <link href="http://nutrun.com/weblog/2009/02/14/caching-proxy-fronted-web-consumer.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/02/14/caching-proxy-fronted-web-consumer.html</id>
    <updated>2009-02-14T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 14 2009</span>
        </div>
        <h2 class="title">Caching proxy fronted web consumer</h2>
        <p>Consider an application which as part of its functionality queries a product search web service.</p>
        <pre>&#x000A;WEB_SERVICE_ADDRESS = 'http://www.example.com'&#x000A;&#x000A;url = URI.parse(WEB_SERVICE_ADDRESS)&#x000A;&#x000A;Net::HTTP.start(url.host, url.port) do |http|&#x000A;  http.get('/product-search', 'q' =&gt; 'guitar')&#x000A;end</pre>
        <p>Inspecting the response headers, we notice the web service instructs consumers that the results of the query will remain the same for one hour.</p>
        <pre>curl -I "http://www.example.com/product-search?q=guitar"
        HTTP/1.1 200 OK
        Content-Type: text/html
        <strong>Cache-Control: max-age=3600, must-revalidate</strong>
        Content-Length: 32650
        Date: Sat, 14 Feb 2009 13:53:31 GMT
        Age: 0
        Connection: keep-alive</pre>
        <p>At this point we can choose to ignore the cache control header and keep on querying the service for this specific resource regardless of whether the response is going to be the same. This is suboptimal for the consumer, which will suffer unnecessary latency penalties, the service, which will have to respond to inessential requests, and the network which will be subject to unnecessary bandwidth usage. Another option involves making the web consumer aware of the service's caching policies so that it only queries for data that it doesn't have or data that's become stale. This option remedies the above problems but introduces additional complexity to the consumer.</p>
        <p>A third option involves introducing a caching proxy to the web consumer's stack responsible for mediating the service/consumer interactions solely based on the content's caching characteristics.</p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/3278914298/" title="caching-proxy-fronted-web-consumer by nutrunflickr, on Flickr">
            <img alt="caching-proxy-fronted-web-consumer" height="149" src="http://farm4.static.flickr.com/3054/3278914298_f039f380ff_o.png" width="422" />
          </a>
        </p>
        <p>Benefits of this approach include: The consumer never has to deal with any caching logic; No effort is required in re-implementing cache handling code; It is likely that the caching engine will perform better than custom caching code in the consumer because it's been built and optimized for this purpose; The caching proxy can be re-used by more than one types of consumer or more than one instances of the same consumer in the stack. As a possible side-effect, the caching proxy is an additional layer to the consumer stack and this can result in network (the consumer's LAN) latency.</p>
        <p>
          Here's the configuration needed in order to use
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>
          as a caching web consumer proxy for the above example.
        </p>
        <pre><strong># varnish.conf</strong>
        backend default {
        .host = "www.example.com";
        .port = "http";
        }</pre>
        <p>The only thing that changes in the consumer is the address it directs its requests to.</p>
        <pre>WEB_SERVICE_ADDRESS =
        <strong>'http://service-proxy'</strong>
        url = URI.parse(WEB_SERVICE_ADDRESS)
        Net::HTTP.start(url.host, url.port) do |http|
        http.get('/product-search', 'q' =&gt; 'guitar')
        end</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  State separation</title>
    <link href="http://nutrun.com/weblog/2009/02/01/state-separation.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/02/01/state-separation.html</id>
    <updated>2009-02-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 01 2009</span>
        </div>
        <h2 class="title">State separation</h2>
        <p>
          It is usual for web applications to deal with serving content specific to a user's session. This makes web caching harder to implement as we don't want content that is meant to be viewed by a particular user being cached and accidentally offered to others. Some HTTP accelerators like
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>
          choose to by default completely ignore responses that contain cookies. However, not all content is always tied to a user's session, and if that content doesn't change in real time, it makes sense to cache the parts that are common to all users in order to improve efficiency. With this in mind, one logical split could be made between parts of the system that are globally cache friendly and ones that aren't.
        </p>
        <p>Consider online retailer websites which usually operate in two modes, one for visitors and one for logged in users. Logged in users are presented with a customized, session specific experience, yet data like the product catalog is essentially the same regardless of whether one is logged in or not and it makes sense for everyone to be accessing the same cached copy of a common resource.</p>
        <p>A possible solution involves creating two separate web applications, one entirely dedicated to stateless interactions and one meant for pages that are rendered as part of a user's session. This might seem like overkill, but it clearly enforces the divide between what can and what can't be cached. It also promotes reuse of the system's web caching layer, which now serves content to site "visitors" as well as to the stateful components. The stateful application can delegate requests for potentially cached content to its stateless counterpart via the caching layer and decorate the responses with session specific data.</p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/3242283753/" title="split_by_state by nutrunflickr, on Flickr">
            <img alt="split_by_state" height="271" src="http://farm4.static.flickr.com/3128/3242283753_9731c494c0_o.png" width="378" />
          </a>
        </p>
        <p>Web caching presents but one way to cache data that remains static for predefined periods of time. Apart from harnessing proven existing tools, this form of caching comes with the advantage that its policies are universally understood and can significantly improve a website's efficiency in ways beyond the maintainer's control. Retrofitting web caching into an application that hasn't been designed with it mind can be difficult, therefore it is worth to logically separate cacheable and non cacheable resources early on.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Distributed key-value store indexing</title>
    <link href="http://nutrun.com/weblog/2009/02/01/distributed-key-value-store-indexing.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/02/01/distributed-key-value-store-indexing.html</id>
    <updated>2009-02-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 01 2009</span>
        </div>
        <h2 class="title">Distributed key-value store indexing</h2>
        <p>Distributed key-value stores present an interesting alternative to some of the functionality relational databases are commonly employed for. Advantages include improved performance, easy replication, horizontal scaling and redundancy.</p>
        <p>
          By nature, key value stores offer one way of retrieving data, by some sort of primary key which uniquely identifies each entry. But what about queries that require more elaborate input in order to collect relevant entries? Full text search engines like
          <a href="http://www.sphinxsearch.com/" rel="nofollow" title="Sphinx - Free open-source SQL full-text search engine">Sphinx</a>
          and
          <a href="http://lucene.apache.org/java/docs/" rel="nofollow" title="Apache Lucene - Overview">Lucence</a>
          do exactly this and when used in conjunction with a database will query their indexes and return a collection of ids which are then used to retrieve the results from the database. Full text search engines support indexing data sources other than RDBMSs, so there's no reason why one couldn't index a distributed key-value store.
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/3244315588/" title="distributed-key-value-store-index by nutrunflickr, on Flickr">
            <img alt="distributed-key-value-store-index" height="390" src="http://farm4.static.flickr.com/3515/3244315588_b9e2f08356_o.png" width="413" />
          </a>
        </p>
        <p>
          Here, we'll look at how we can integrate Sphinx with
          <a href="http://memcachedb.org/" title="MemcacheDB: A distributed key-value storage system designed for persistent">MemcacheDB</a>,
          a distributed key-value store which conforms to the
          <a href="http://www.danga.com/memcached/" rel="nofollow" title="memcached: a distributed memory object caching system">memcached</a>
          protocol and uses Berkeley DB as its storage back-end.
        </p>
        <p>
          Sphinx comes with an
          <a href="http://www.sphinxsearch.com/docs/current.html#xmlpipe2" rel="nofollow" title="Sphinx - Free open-source SQL full-text search engine">xmlpipe2 datasource</a>,
          a generic XML interface aimed at simplifying custom integration. What this means is that our application can transform content from MemcacheDB into this format and feed it to Sphinx for indexing. The highlighted lines from the following Sphinx configuration instruct Sphinx to use the
          <code>xmlpipe2</code>
          source type and invoke the
          <code>ruby /app/lib/sphinxpipe.rb</code>
          script in order to retrieve the data to index.
        </p>
        <pre><strong># sphinx.conf</strong>
        source products_src
        {
        <strong>type = xmlpipe2</strong>
        <strong>xmlpipe_command = ruby /app/lib/sphinxpipe.rb</strong>
        }
        index products
        {
        source = products_src
        path = /app/sphinx/data/products
        docinfo = extern
        mlock = 0
        morphology = stem_en
        min_word_len = 1
        charset_type = utf-8
        enable_star = 1
        html_strip = 0
        }
        indexer
        {
        mem_limit = 256M
        }
        searchd
        {
        port = 3312
        log = /app/sphinx/log/searchd.log
        query_log = /app/sphinx/log/query.log
        read_timeout = 5
        max_children = 30
        pid_file = /app/sphinx/searchd.pid
        max_matches = 10000
        seamless_rotate = 1
        preopen_indexes = 0
        unlink_old = 1
        }</pre>
        <p>
          Following is a Product class. Each product instance can present itself as
          <code>xmlpipe2</code>
          data. The class itself gets the entire product catalog as a
          <code>xmlpipe2</code>
          data source. It also has a
          <code>search</code>
          method used for querying Sphinx and retrieving matched products from MemcacheDB. Finally, there's a
          <code>bootstrap</code>
          method for populating the store with some example data.
        </p>
        <pre><strong># product.rb</strong>
        require "rubygems"
        require "xml/libxml"
        require "memcached"
        require "riddle"
        class Product
        attr_reader :id
        MEM = Memcached.new('localhost:21201')
        def initialize(id, title)
        @id, @title = id, title
        end
        def to_sphinx_doc
        sphinx_document = XML::Node.new('sphinx:document')
        sphinx_document['id'] = @id
        sphinx_document &lt;&lt; title = XML::Node.new('title')
        title &lt;&lt; @title
        sphinx_document
        end
        <strong># Query sphinx and load products with matched ids from MemcacheDB</strong>
        def self.search(query)
        client = Riddle::Client.new
        client.match_mode = :any
        client.max_matches = 10_000
        results = client.query(query, 'products')
        ids = results[:matches].map {|m| m[:doc].to_s}
        MEM.get(ids) if ids.any?
        end
        <strong># Load all products from MemcacheDB and convert them to xmlpipe2 data</strong>
        def self.sphinx_datasource
        docset = XML::Document.new.root = XML::Node.new("sphinx:docset")
        docset &lt;&lt; sphinx_schema = XML::Node.new("sphinx:schema")
        sphinx_schema &lt;&lt; sphinx_field = XML::Node.new('sphinx:field')
        sphinx_field['name'] = 'title'
        keys = MEM.get('product_keys')
        products = MEM.get(keys)
        products.each { |id, product| docset &lt;&lt; product.to_sphinx_doc }
        %(&lt;?xml version="1.0" encoding="utf-8"?&gt;\n#{docset})
        end
        <strong># Create a some products and store them in MemcacheDB</strong>
        def self.bootstrap
        product_ids = ('1'..'5').to_a.inject([]) do |ids, id|
        product = Product.new(id, "product #{id}")
        MEM.set(product.id, product)
        ids &lt;&lt; id
        end
        MEM.set('product_keys', product_ids)
        end
        end</pre>
        <p>
          The
          <code>sphinxpipe.rb</code>
          script looks like this.
        </p>
        <pre><strong># sphinxpipe.rb</strong>
        Product.bootstrap
        puts Product.sphinx_datasource</pre>
        <p>
          With MemcacheDB (or even memcached for the purpose of this example) running, we can tell Sphinx to create an index of products by invoking
          <code>indexer --all -c sphinx.conf</code>
          and then start the search daemon -
          <code>searchd -c sphinx.conf</code>.
          Now we're ready to start querying the index and retrieving results from the distributed store.
        </p>
        <pre>&#x000A;puts Product.search('product 1').inspect</pre>
        <p>It is not uncommon for the database to become a performance hotspot. The integration of a fast, distributed key-value store with an efficient search engine can be an interesting substitute for high throughput data retrieval operations.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Live component rotation</title>
    <link href="http://nutrun.com/weblog/2009/01/22/live-component-rotation.html" type="text/html" />
    <id>http://nutrun.com/weblog/2009/01/22/live-component-rotation.html</id>
    <updated>2009-01-22T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 22 2009</span>
        </div>
        <h2 class="title">Live component rotation</h2>
        <p>Many applications comprise of a number of components, the majority of which are shared by others in the system. Different parts of the system exercise their collaborators in a variety of ways, think of a website where data is periodically processed by jobs and stored in a database while presentation modules handle rendering the data in ways meaningful to end users. Shared resources can yield the unwanted side effect of performance degradation when a given component is being pushed too hard to perform part of its tasks, affecting each piece of the system that depends on it. In the shared database website example, the website might suffer low response times while potentially heavy on the database processing jobs are running.</p>
        <p>One way of getting around this problem involves creating more than one instances of the shared resource, one of which is considered "live", the one the system's clients interact with, and perform expensive operations on a copy which will itself become live the moment these operations conclude. This solution does not apply to every situation but can be useful in scenarios where real time is not a concern. In the example website's case, we can create a copy of the database on which we run the processing jobs. The front end components run off the "stale", live database copy whose performance is not affected by the jobs. Once the jobs complete we can switch databases and repeat the live component rotation process as needed. Live component rotation also nicely lends itself to distribution, as component copies can exist on different physical hosts.</p>
        <p>Virtualization and cloud computing make this method all the more interesting. Imagine hosting a database server on Amazon EC2 with its static data stored on an EBS volume. We can snapshot the EBS volume, fire up a new EC2 instance, attach the snapshot to it, run the job and rotate live database instances once the jobs are complete with most parts of the system never having to worry about the costly operations taking place.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rack cache headers</title>
    <link href="http://nutrun.com/weblog/2008/11/08/rack-cache-headers.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/11/08/rack-cache-headers.html</id>
    <updated>2008-11-08T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 08 2008</span>
        </div>
        <h2 class="title">Rack cache headers</h2>
        <p>
          <a href="http://rack.rubyforge.org/" title="Rack: a Ruby Webserver Interface">Rack</a>
          is an interface between web servers and Ruby web frameworks. The
          <a href="http://www.w3.org/Protocols/" title="HTTP - Hypertext Transfer Protocol Overview">HTTP</a>
          protocol, amongst other things, defines requirements on
          <a href="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p6-cache-04.txt" title="">HTTP caches</a>
          in terms of header fields that control cache behavior. The purpose of this article is to demonstrate a possible implementation of a piece of Rack Middleware which enables web application developers to configure a web application's resource cache related headers in a non obtrusive, centralized manner.
        </p>
        <p>Rack supports the notion of Middleware, pieces of code that sit between the HTTP request and response life cycle. Rack::Lint, for example, validates an application's requests and responses according to the Rack specification.</p>
        <pre>&#x000A;Rack::Handler::Mongrel.run(&#x000A;  Rack::Lint.new(app), :Host =&gt; "0.0.0.0", :Port =&gt; 9999&#x000A;)</pre>
        <p>Similarly, if we were to implement a cache header producing layer on top of Rack we'd end up with a construct similar to the following.</p>
        <pre>&#x000A;Rack::Handler::Mongrel.run(&#x000A;  Rack::Lint.new(&#x000A;    Rack::CacheHeaders.new(app)&#x000A;  ), :Host =&gt; "0.0.0.0", :Port =&gt; 9999&#x000A;)</pre>
        <p>Here's a possible way of configuring how an application provides HTTP caching headers based on URL path patterns.</p>
        <pre>&#x000A;Rack::CacheHeaders.configure do |cache|&#x000A;  cache.max_age("/rock", 3600)&#x000A;  cache.expires("/metal", "16:00")&#x000A;end</pre>
        <p>Following is a potential implementation for the above.</p>
        <pre>&#x000A;module Rack&#x000A;  class CacheHeaders&#x000A;    def initialize(app)&#x000A;      @app = app&#x000A;    end&#x000A;&#x000A;    def call(env)&#x000A;      result = @app.call(env)&#x000A;      header = Configuration[env['PATH_INFO']].to_header&#x000A;      result[1][header.key] = header.value&#x000A;      result&#x000A;    end&#x000A;&#x000A;    def self.configure(&amp;block)&#x000A;      yield Configuration&#x000A;    end&#x000A;&#x000A;    class Configuration&#x000A;      def self.max_age(path, duration)&#x000A;        paths[path] = MaxAge.new(duration)&#x000A;      end&#x000A;&#x000A;      def self.expires(path, date)&#x000A;        paths[path] = Expires.new(date)&#x000A;      end&#x000A;&#x000A;      def self.[](key)&#x000A;        paths[key]&#x000A;      end&#x000A;&#x000A;      def self.paths&#x000A;        @paths ||= {}&#x000A;      end&#x000A;    end&#x000A;    &#x000A;    class MaxAge&#x000A;      def initialize(duration)&#x000A;        @duration = duration&#x000A;      end&#x000A;      &#x000A;      def to_header&#x000A;        Header.new("Cache-Control", "max-age=, must-revalidate")&#x000A;      end&#x000A;    end&#x000A;    &#x000A;    class Expires&#x000A;      def initialize(date)&#x000A;        @date = date&#x000A;      end&#x000A;      &#x000A;      def to_header&#x000A;        Header.new("Expires", Time.parse(@date).httpdate)&#x000A;      end&#x000A;    end&#x000A;    &#x000A;    class Header &lt; Struct.new(:key, :value);end&#x000A;  end&#x000A;end</pre>
        <p>The code below is a minimal Rack based application.</p>
        <pre>&#x000A;require "rubygems"&#x000A;require "rack"&#x000A;&#x000A;app = proc {|env| [200, {"Content-Type" =&gt; "text/plain"}, "hello"]}&#x000A;&#x000A;Rack::Handler::Mongrel.run(&#x000A;  Rack::Lint.new(&#x000A;    Rack::CacheHeaders.new(app)&#x000A;  ), :Host =&gt; "0.0.0.0", :Port =&gt; 9999&#x000A;)</pre>
        <p>
          In order to observe the caching related headers the application's responses are decorated with we can use
          <code>curl</code>
          or something similar, i.e
          <code>curl -I http://0.0.0.0:9999/rock</code>
          or
          <code>curl -I http://0.0.0.0:9999/metal</code>.
          Output should look something like the following.
        </p>
        <pre>&#x000A;air:~ gmalamid$ curl -I http://0.0.0.0:9999/rock&#x000A;HTTP/1.1 200 OK&#x000A;Connection: close&#x000A;Date: Sat, 08 Nov 2008 00:51:23 GMT&#x000A;Cache-Control: max-age=3600, must-revalidate&#x000A;Content-Type: text/plain&#x000A;Content-Length: 5&#x000A;&#x000A;air:~ gmalamid$ curl -I http://0.0.0.0:9999/metal&#x000A;HTTP/1.1 200 OK&#x000A;Connection: close&#x000A;Date: Sat, 08 Nov 2008 00:51:16 GMT&#x000A;Content-Type: text/plain&#x000A;Expires: Sat, 08 Nov 2008 16:00:00 GMT&#x000A;Content-Length: 5</pre>
        <p>
          Understanding and employing HTTP cache configuration not only enables harnessing the power of tools like
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>
          or
          <a href="http://www.squid-cache.org/" title="squid : Optimising Web Delivery">Squid</a>,
          it also makes good citizens in a diverse ecosystem of HTTP aware browsers and caches outside an application's knowledge or control.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  HTTP accelerator cache purging</title>
    <link href="http://nutrun.com/weblog/2008/11/02/http-accelerator-cache-purging.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/11/02/http-accelerator-cache-purging.html</id>
    <updated>2008-11-02T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 02 2008</span>
        </div>
        <h2 class="title">HTTP accelerator cache purging</h2>
        <p>
          The use of an HTTP accelerator such as
          <a href="http://varnish.projects.linpro.no/" title="Varnish - Trac">Varnish</a>
          or
          <a href="http://www.squid-cache.org/" title="squid : Optimising Web Delivery">Squid</a>
          in reverse proxy/accelerator mode can drastically improve a web application's content delivery capabilities. Successfully implementing caching comes with numerous challenges but the fundamental goal is straightforward: A stack's dynamic content generating layer should ideally not have to generate the same content more than once.
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "sinatra"&#x000A;&#x000A;def guitars&#x000A;  @@guitars ||= ['Les Paul', 'SG']&#x000A;end&#x000A;&#x000A;get "/guitars" do&#x000A;  guitars * ', '&#x000A;end</pre>
        <p>
          This application exposes a
          <code>/guitars</code>
          resource, a request for which will always hit the application server if no caching has been in place. This can prove suboptimal had this been a high traffic website, especially if the operation of generating the content is system resource intensive. Luckily this problem has been solved before. A running instance of Varnish, for example, will only require the following configuration to enable caching of all resources the application serves.
        </p>
        <pre>&#x000A;backend default {&#x000A;  .host = "127.0.0.1";&#x000A;  .port = "4567";&#x000A;}</pre>
        <p>
          One of the challenges associated with caching has to do with the cached content's freshness. We want to relieve server stress as much as possible, but we also need our application's consumers to receive correct data at all times. Let's assume that the application contacts guitar manufacturers' websites once a day to refresh its inventory and we have scheduled this operation to complete at 16:00 every day. This suggests that the cached resource should be refreshed every day at four o'clock in the afternoon to reflect the latest list of available guitar models. One of the ways of achieving this in HTTP is by making use of the
          <code>Expires</code>
          header, whose semantics are understood by (hopefully) any caching aware HTTP component.
        </p>
        <pre>&#x000A;require "time"&#x000A;&#x000A;get "/guitars" do&#x000A;  headers "Expires" =&gt; Time.parse("16:00").httpdate&#x000A;  guitars * ', '&#x000A;end</pre>
        <p>Things aren't always as straightforward. In many cases we cannot fully control the exact time or frequency a resource's content changes. The example application also comes with an admin interface, allowing the guitar list administrators to manually enter new guitar models.</p>
        <pre>&#x000A;post "/guitars" do&#x000A;  guitars &lt;&lt; params["guitar"]&#x000A;  redirect("/guitars")&#x000A;end</pre>
        <p>
          It is clear that a means for arbitrary expiration of cached content needs to be available in order to maintain content freshness. With Varnish, this capability comes in two flavors, one of which involves the use of a
          <code>PURGE</code>
          HTTP call. The following configuration enables this functionality.
        </p>
        <pre>&#x000A;acl purge {&#x000A;  "localhost";&#x000A;}&#x000A;&#x000A;sub vcl_recv {&#x000A;  if (req.request == "PURGE") {&#x000A;    if (!client.ip ~ purge) {&#x000A;      error 405 "Not allowed.";&#x000A;    }&#x000A;    lookup;&#x000A;  }&#x000A;}&#x000A;&#x000A;sub vcl_hit {&#x000A;  if (req.request == "PURGE") {&#x000A;    set obj.ttl = 0s;&#x000A;    error 200 "Purged.";&#x000A;  }&#x000A;}&#x000A;&#x000A;sub vcl_miss {&#x000A;  if (req.request == "PURGE") {&#x000A;    error 404 "Not in cache.";&#x000A;  }&#x000A;}</pre>
        <p>
          To natively make use of this in Ruby, we need to extend the
          <code>Net::HTTP</code>
          library to support the
          <code>PURGE</code>
          method.
        </p>
        <pre>&#x000A;require "net/http"&#x000A;require "uri"&#x000A;&#x000A;module Net&#x000A;  class HTTP&#x000A;    class Purge &lt; HTTPRequest&#x000A;      METHOD = "PURGE"&#x000A;      REQUEST_HAS_BODY = false&#x000A;      RESPONSE_HAS_BODY = false&#x000A;    end&#x000A;  &#x000A;    def purge(path, initheader=nil)&#x000A;      request(Purge.new(path, initheader))&#x000A;    end&#x000A;  end&#x000A;end&#x000A;&#x000A;def purge_cache(u)&#x000A;  uri = URI.parse(u)&#x000A;  query = "?#{uri.query}" if uri.query&#x000A;  Net::HTTP.new(uri.host, uri.port).start {|h| h.purge("#{uri.path}#{query}")}&#x000A;end</pre>
        <p>
          Now we can expire the cached
          <code>/guitars</code>
          resource every time the list is amended.
        </p>
        <pre>&#x000A;post "/guitars" do&#x000A;  guitars &lt;&lt; params["guitar"]&#x000A;  purge_cache("http://localhost/guitars")&#x000A;  redirect("/guitars")&#x000A;end</pre>
        <p>
          Although this method is effective, there can be cases where the bidirectional coupling between the application and caching layers might be undesirable. With the fundamental functional pieces in place, however, it is not hard to implement a more elaborate strategy such as the one described in
          <a href="http://www.mnot.net/cache_channels/" title="HTTP Cache Channels">Cache Channels</a>
          in order to reduce the application layer's knowledge of the caching infrastructure.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Our
            <a href="http://www.testkings.com/exam/640-863.htm">testking 640-863</a>
            training material includes everything to help you prepare for real exam. Boost up your expert knowledge using
            <a href="http://www.testkings.com/exam/642-436.htm">testking 642-436</a>
            tutorials and
            <a href="http://www.testkings.com/exam/220-702.htm">testking 220-702</a>
            study guide.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Parallelize by process</title>
    <link href="http://nutrun.com/weblog/2008/10/26/parallelize-by-process.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/10/26/parallelize-by-process.html</id>
    <updated>2008-10-26T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 26 2008</span>
        </div>
        <h2 class="title">Parallelize by process</h2>
        <p>Performing computations in parallel is a popular technique for improving application performance and can be achieved in a number of ways, most commonly by employing threads or by splitting workload in a number of concurrent processes.</p>
        <p>Memory usage is often a headache with large dataset computations. While memory optimization is something to be sought after, tracking down memory leaks can become tedious and time consuming. We can decrease the chances of a heavy job running a system's memory dry by coming up with a strategy for fragmenting the job into a number of shorter running processes. By doing so, any memory used by a worker process will be released the moment the process completes. Additionally, we can run job fragments in parallel, allow ourselves to harness the operating system's multi-core capabilities and potentially distribute worker processes over a number of physical hosts and scale out when the need arises. Smaller processes also dictate more manageable chunks of code which are easier to maintain, optimize and test.</p>
        <p>Let's look at an example where a job involves fetching a large number of categorized products from various sources and processes them for use by our own application.</p>
        <pre>&#x000A;class Job&#x000A;  def perform&#x000A;    ADDRESSES.each do |address|&#x000A;      category = load_category(address)&#x000A;      category.products.each { |product| process(product) }&#x000A;    end&#x000A;  end&#x000A;  &#x000A;  def process(product)&#x000A;    #some intensive computation&#x000A;  end&#x000A;  &#x000A;  def load_category(address)&#x000A;    #load an addressable category dataset&#x000A;  end&#x000A;end</pre>
        <p>
          Let's assume that the
          <code>ADDRESSES</code>
          constant in the example is a list consisting of entries such as
          <code>example.com/toys</code>,
          <code>example.com/phones</code>,
          <code>example.org/guitars</code>,
          etc. The job fetches the addressable by category product datasets, iterates over the products and performs a long processing operation on each. Supposing that after every possible optimization the job takes three hours to complete, we can at best run the job eight times a day. What happens if the product categories are updated more often than eight times a day and a requirement in order for our application to be successful suggests that it needs to deal with fresh data all the time?
        </p>
        <p>
          One natural split can involve creating a worker process for each address entry. We can do so by extracting the majority of the code from the
          <code>Job</code>
          class into a
          <code>Worker</code>
          class meant to run as a standalone process.
        </p>
        <pre>&#x000A;class Worker&#x000A;  def self.process_category(address)&#x000A;    category = load_category(address)&#x000A;    category.products.each { |product| process(product) }&#x000A;  end&#x000A;  &#x000A;  def self.process(product)&#x000A;    #some intensive computation&#x000A;  end&#x000A;  &#x000A;  def self.load_category(address)&#x000A;    #load an addressable category dataset&#x000A;  end&#x000A;end&#x000A;&#x000A;Worker.process_category(ARGV[0]) if ARGV.size == 1</pre>
        <p>Each worker will operate on a significantly smaller dataset and will complete much faster than the initial long running job. Any memory used by each worker will be immediately released the moment the process finishes execution.</p>
        <p>
          After the latest change,
          <code>Job</code>
          can take on the role of instrumenting the worker processes. We start by only allowing an arbitrary maximum number of concurrent workers, three in this case.
        </p>
        <pre>&#x000A;require "thread"&#x000A;&#x000A;class Job&#x000A;  def initialize&#x000A;    @worker_count, @mutex = 3, Mutex.new&#x000A;  end&#x000A;&#x000A;  def perform&#x000A;    ADRESSESES.each do |address|&#x000A;      sleep 0.1 until @worker_count &gt; 0&#x000A;      @worker_count -= 1&#x000A;      Thread.new do&#x000A;        system("ruby worker.rb #{address}")&#x000A;        @mutex.synchronize {@worker_count += 1}&#x000A;      end&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <p>
          At this point it is a good idea to run the job and monitor the time it takes for it to complete while also measuring system resource usage. This way we can determine the optimal number of concurrent worker processes based on the system's specs. Once available resources have been exhausted and both
          <code>Job</code>
          and
          <code>Worker</code>
          have been sufficiently optimized, we can start thinking about running workers on separate physical nodes.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Anarchic versus controlled scalability</title>
    <link href="http://nutrun.com/weblog/2008/10/04/anarchic-versus-controlled-scalability.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/10/04/anarchic-versus-controlled-scalability.html</id>
    <updated>2008-10-04T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 04 2008</span>
        </div>
        <h2 class="title">Anarchic versus controlled scalability</h2>
        <p>With the number of websites at the time of this writing in the region of one hundred and sixty million and more than a trillion webpages, the Web is the largest network infrastructure to date. Figures like this are nothing short of enviable and so the web's architecture has been increasingly influencing software authors' design decisions to the extend of emergent trends that place this approach in habitats where it hasn't traditionally been commonplace, such as that of "enterprise" middleware.</p>
        <p>The Web's possibly most notable triumph is offering its citizens the ability to exist and adapt in a context that is difficult to control or predict. The design has achieved its monumental scalability by following the set of constraints which compose the REST architectural style. Alongside other objectives, these constraints were put together in order for systems to effectively satisfy a need for anarchic scalability but - and this is something we must not forget - the benefits of these constraints come with associated trade-offs.</p>
        <p>Architectural decisions should involve weighing the costs and benefits they introduce to the specific topic they attempt to address. There is no universal solution to every design problem and, while REST has proven successful in achieving anarchic scalability, not all systems exist in wild, disorderly environments. Introducing REST constraints in a system that doesn't need to be as loosely controlled as the web can incur unnecessary overhead.</p>
        <p>
          Section
          <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3" title="Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)">5.1.3 Stateless</a>
          from Roy Fielding's seminal
          <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>
          paper is a good example. Particular interest for this discussion lies in the second paragraph:
        </p>
        <p>
          <cite>Like most architectural choices, the stateless constraint reflects a design trade-off. The disadvantage is that it may decrease network performance by increasing the repetitive data (per-interaction overhead) sent in a series of requests, since that data cannot be left on the server in a shared context.</cite>
        </p>
        <p>Let's consider an imaginary example, an auction service which publishes price updates and accepts bids on auctioned items. As a given - this is a private auction - 3000 consumers will interact with the service, each of those subscribing to price updates and placing bids whenever they see fit. These consumers must be authorized to interact with the service.</p>
        <p>If we were to carry out the above over HTTP, a potential implementation would involve the service publishing an item's current price as a feed, with the consumers subscribing to it and polling for updates. The service enforces a polling frequency of 10 seconds per consumer. For one item, this will result in 6 * 60 * 24 * 3000 = 25,920,000 requests/day. Consumers also need to be authorized to access the resource, so, respecting the statelessness constraint, 25,920,000 handshakes/day will take place. If we assume that an item receives 20,000 bids a day, the system becomes subject to 25,900,000 unnecessary requests and handshakes.</p>
        <p>The 20,000 bids/day assumption suggests an average bid frequency of 86400/20000 = 4.32 seconds. The 10 second interval polling frequency is suboptimal when it comes to consumers being able to act on price updates in near real time.</p>
        <p>We can optimize by making the consumers friendlier by respecting ETag, Last-Modified, conditional GET and partial GET instructions as proposed by the service. These manage to reduce some unnecessary network usage, but do not reduce the number of requests, nor do they decrease the number of handshakes. Caching and reverse proxies are also commonly employed for relieving server stress, although, due to the close to real time requirement of this scenario, configuring those effectively can be tricky.</p>
        <p>In contrast, if we were to implement the example on top of an event driven, stateful transport such as XMPP, the service could publish updates on PubSub nodes, consumers would subscribe to those and receive updates as they happen. By doing so, we're looking at 20,000 messages, equal to the number of bids and 3,000 handshakes, equal to the number of connections, equal to the number of consumers. The number of unnecessary requests/handshakes is reduced to zero.</p>
        <p>The latter does not make a good candidate for an environment where the number of consumers interacting with the service is outside our control. With each consumer maintaining an open connection, the service never gets the opportunity to release system resources and there is a finite number of persistent connections a physical infrastructure can accommodate.</p>
        <p>Adopting established, widely understood open standards introduces a plethora of benefits. HTTP, BitTorrent, XMPP, SMTP, FTP all have contributed to internet scale success stories and all come with associated merits and trade-offs. When faced with choice, we should examine the benefits and drawbacks of each, relative to the characteristics of the environment the system exists in. More interestingly, we should investigate combining available options so that one complements the others' strengths while countering potential sacrifices.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Efficient data imports</title>
    <link href="http://nutrun.com/weblog/2008/09/23/efficient-data-imports.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/09/23/efficient-data-imports.html</id>
    <updated>2008-09-23T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Sep 23 2008</span>
        </div>
        <h2 class="title">Efficient data imports</h2>
        <p>An application's performance is affected, among other things, by the performance of its parts. A large number of current applications contain a database layer which I've noticed become neglected more often than it deserves. This is unfortunate because there are a lot of quick performance victories that can be achieved by harnessing a database's strong points.</p>
        <p>Let's think of an application which periodically collects large amounts of data, adapts it from a foreign structure into its native domain and stores the results in a database for further use. Data units must be unique, something we need to enforce each time a new import takes place.</p>
        <p>
          One way of achieving this would be to construct domain native objects or structures by parsing the external data feeds and check against the existence of duplicates in the database, using a custom hashcode identity mechanism. We can store the hashcode values in a
          <code>UNIQUE</code>
          database column to ensure data integrity.
        </p>
        <pre>&#x000A;DATA.each {|e| DB[:entries] &lt;&lt; e rescue nil}</pre>
        <p>This code iterates over the adapted object enumeration and attempts a database insert for each entry, ignoring any exceptions due to uniqueness violations. It also introduces the significant overhead of performing a number of database queries equal to the number of entries included in the imported collection.</p>
        <p>
          Bulk inserts are nothing new and most, if not all, modern databases offer this functionality, which is also supported by the majority of database access application libraries. Ruby's
          <a href="http://sequel.rubyforge.org/" title="Sequel: The Database Toolkit for Ruby">Sequel</a>,
          for instance, allows bulk insert operations with the
          <code>    <a href="http://sequel.rubyforge.org/rdoc/classes/Sequel/Dataset.html#M000675" title="Class: Sequel::Dataset">multi_insert</a></code>
          method.
        </p>
        <pre>&#x000A;DB[:entries].multi_insert(DATA)</pre>
        <p>
          There's a caveat here, as this operation will terminate the moment a duplicate entry violation error occurs. MySQL offers the
          <code>INSERT IGNORE</code>
          construct which is particularly useful in this scenario. Using the
          <code>IGNORE</code>
          keyword will cause errors that occur while executing the
          <code>INSERT</code>
          statement to be treated as warnings.
        </p>
        <p>
          Looking to investigate the performance boost associated with the above technique, I've put together a small extension for Sequel, enabling the toolkit to make use of
          <code>INSERT IGNORE</code>.
        </p>
        <pre>&#x000A;module InsertIgnore  &#x000A;  def ignore_duplicates!&#x000A;    @ignore = true&#x000A;    self&#x000A;  end&#x000A;  &#x000A;  def multi_insert_sql(columns, values)&#x000A;    columns = column_list(columns)&#x000A;    values = values.map {|r| literal(Array(r))}.join(Sequel::MySQL::Dataset::COMMA_SEPARATOR)&#x000A;    ignore = @ignore ? " IGNORE " : ' '&#x000A;    ["INSERT#{ignore}INTO #{source_list(@opts[:from])} (#{columns}) VALUES #{values}"]&#x000A;  end&#x000A;end</pre>
        <p>This can be used like this:</p>
        <pre>&#x000A;Sequel::MySQL::Dataset.send(:include, InsertIgnore)&#x000A;DB[:entries].ignore_duplicates!.multi_insert(DATA)</pre>
        <p>
          Inserting 100,000 records, some of them duplicates, using the application loop approach which issues an insert query for each entry took about 49 seconds on my laptop. Its
          <code>INSERT IGNORE</code>
          counterpart took about 4 seconds.
        </p>
        <p>
          There are things to watch out for when using the latter approach. We can potentially construct very large queries, depending on the number of records we intend to insert. MySQL sets the maximum length of packets with the
          <code>max_allowed_packet</code>
          system variable which defaults to 1 kilobyte and can be increased up to 1 gigabyte. Loading such large datasets in memory can prove problematic, so slicing the import in chunks is probably a good idea.
        </p>
        <p>
          In like manner, it's worth mentioning MySQL's
          <code>ON DUPLICATE KEY UPDATE</code>,
          which updates an existing column subsequent to a failed insert due to a duplicate value violation.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  EventMachine MapReduce</title>
    <link href="http://nutrun.com/weblog/2008/09/09/eventmachine-mapreduce.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/09/09/eventmachine-mapreduce.html</id>
    <updated>2008-09-09T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Sep 09 2008</span>
        </div>
        <h2 class="title">EventMachine MapReduce</h2>
        <p>
          <a href="http://labs.google.com/papers/mapreduce.html" title="Google Research Publication: MapReduce">MapReduce</a>
          is a parallel computation strategy useful for scaling large data set processing by distributing workload over multiple worker nodes. The distributed nature of MapReduce suggests network communication and, with that in mind, I thought I'd put together a demonstration employing
          <a href="http://rubyeventmachine.com/" title="Ruby / EventMachine - Trac">EventMachine</a>,
          a library which makes efficient network programming relatively simple in Ruby.
        </p>
        <p>
          Before going any further, I should mention that the code examples have not been optimized for production use, they only illustrate what's possible. Also, it's worth bringing up two established Ruby libraries for tackling similar problems,
          <a href="http://rufy.com/starfish/doc/" title="Starfish - ridiculously easy distributed programming with Ruby">Starfish</a>
          and
          <a href="http://skynet.rubyforge.org/" title="space">Skynet</a>.
          It's advisable that these existing options are investigated before delving into custom alternatives.
        </p>
        <p>
          MapReduce essentially consists of two steps (although intermediate phases usually need be present for real world implementations),
          <em>map</em>
          and
          <em>reduce</em>.
          <em>map</em>
          refers to the higher order function also known as
          <em>transform</em>
          or
          <em>collect</em>
          and is the operation that is typically distributed and involves a number of nodes performing the transformation of a data set into another set of data.
          <em>reduce</em>
          refers to the higher order function, sometimes called
          <em>fold</em>,
          <em>inject</em>
          or other, which is in this case used for collecting the results of map to build a return value.
        </p>
        <p>Counting the number of word occurrences in a large number of documents is one of the examples most commonly used for describing MapReduce. A number of distributed jobs is spawned, splitting document contents into words. The results of these operations are passed to a reduce process whose job is to sum its input.</p>
        <p>Map processes can be EventMachine servers. We can have an arbitrary number of those running on a number of physical nodes.</p>
        <pre>&#x000A;module Map&#x000A;  def receive_data(path)&#x000A;    document = File.read(path)&#x000A;    word_counts = document.split(' ').map { |word| [word, 1] }&#x000A;    send_data(Marshal.dump(word_counts))&#x000A;    close_connection_after_writing&#x000A;  end&#x000A;end&#x000A;&#x000A;EM.run {EM.start_server("localhost", 5555, Map)}</pre>
        <p>A reduce process can send job requests to those servers, receive and process the results.</p>
        <pre>&#x000A;class Reduce &lt; EM::Connection&#x000A;  @@all = []&#x000A;  &#x000A;  def initialize(*args)&#x000A;    super&#x000A;    @doc, @data = args[0], ''&#x000A;  end&#x000A;  &#x000A;  def post_init&#x000A;    send_data(@doc)&#x000A;  end&#x000A;  &#x000A;  def receive_data(data)&#x000A;    @data &lt;&lt; data&#x000A;  end&#x000A;  &#x000A;  def unbind&#x000A;    Reduce.job_completed&#x000A;    @@all += Marshal.load(@data)&#x000A;    unless Reduce.pending_jobs?&#x000A;      groups = @@all.group_by {|word| word[0] }&#x000A;      groups.each { |g| p "#{g[0]} : #{g[1].size}" }&#x000A;      EM.stop&#x000A;    end&#x000A;  end&#x000A;  &#x000A;  def self.send_map_job(port, doc)&#x000A;    @job_count ||= 0&#x000A;    increment_job_count&#x000A;    EM.connect("localhost", port, Reduce, doc)&#x000A;  end&#x000A;  &#x000A;  def self.increment_job_count&#x000A;    @job_count += 1&#x000A;  end&#x000A;  &#x000A;  def self.pending_jobs?&#x000A;    @job_count != 0&#x000A;  end&#x000A;  &#x000A;  def self.job_completed&#x000A;    @job_count -= 1&#x000A;  end&#x000A;end&#x000A;&#x000A;EM.run do&#x000A;  {&#x000A;    5555 =&gt; 'docs/america.txt', &#x000A;    6666 =&gt; 'docs/da-vinci.txt'&#x000A;  }.each { |port, doc| Reduce.send_map_job(port, doc) }&#x000A;end</pre>
        <p>The example lacks plumbing code which would make things flexible enough and, as you might have noticed, works on a single node (localhost), but hopefully illustrates a mechanism for distributing workload over a networked farm.</p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            The
            <a href="http://www.testkings.com/exam/350-030.htm">testking 350-030</a>
            online preparation course is guaranteed way to pass real exam on time. Sign up for
            <a href="http://www.testkings.com/exam/642-642.htm">testking 642-642</a>
            training and pass real exam on first try using
            <a href="http://www.testkings.com/exam/PMI-001.htm">testking PMI-001</a>
            study pack.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Phusion Passenger on Amazon EC2</title>
    <link href="http://nutrun.com/weblog/2008/08/20/phusion-passenger-on-amazon-ec2.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/08/20/phusion-passenger-on-amazon-ec2.html</id>
    <updated>2008-08-20T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 20 2008</span>
        </div>
        <h2 class="title">Phusion Passenger on Amazon EC2</h2>
        <p>
          <a href="http://www.modrails.com/" title="Overview &amp;#x2014; Phusion Passenger™ (a.k.a. mod_rails / mod_rack)">Phusion Passenger</a>
          has come a long way since its first public release, significantly simplifying the deployment of Ruby web applications on Apache servers, especially since the addition of support for
          <a href="http://rack.rubyforge.org/" title="Rack: a Ruby Webserver Interface">Rack</a>.
        </p>
        <p>
          You can use
          <a href="http://nutrun.com/passenger-ec2/Capfile" title="ec2 passenger capfile example">this example Capile</a>
          if you'd like to get started quickly with trying out Passenger deployments on
          <a href="http://aws.amazon.com/ec2" title="Amazon Web Services @ Amazon.com">Amazon EC2</a>.
        </p>
        <p>
          It is assumed that your environment has been previously configured for launching EC2 AMIs. If not, you might want to read the
          <a href="http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/" title="Amazon Elastic Compute Cloud">EC2 Getting Started Guide</a>,
          or refer to the first bits of
          <a href="http://nutrun.com/weblog/rubyworks-production-stack-on-amazon-ec2/" title="nutrun  » Blog Archive   » RubyWorks Production Stack on Amazon EC2">this article</a>.
        </p>
        <p>
          By completing the following steps, we will end up with a running
          <a href="http://www.debian.org/" title="Debian -- The Universal Operating System">Debian</a>
          AMI, with Ruby 1.8.7, Rubygems 1.2.0, Apache2 and Passenger installed.
        </p>
        <p>
          First, find the section about AWS credentials in the Capfile and replace the values with yours. These are
          <code>:keypair</code>,
          <code>:account_id</code>,
          <code>:access_key_id</code>,
          <code>:secret_access_key</code>,
          <code>:pk</code>
          and
          <code>:cert</code>.
          Once this is done, invoke:
        </p>
        <pre>&#x000A;cap instance:start</pre>
        <p>
          Copy the instance id from the output of this command and use it as the value for the
          <code>:instance_id</code>
          field in the Capfile. Call
          <code>ec2-describe-instances</code>
          until the AMI has been started. Use the instance URL that comes for the
          <code>:instance_url</code>
          field in the Capfile. Next invoke:
        </p>
        <pre>&#x000A;cap instance:bootstrap</pre>
        <p>This will install Apache2 and Passenger on the instance. Once this step is complete, you can navigate to the instance URL from a browser and see the default page served by the newly installed, Passenger enabled Apache. At this point - optionally and for demonstration purposes - you can invoke:</p>
        <pre>&#x000A;cap instance:example_app</pre>
        <p>
          This will install the
          <a href="http://merbivore.com/" title="Merb | Looking for a hacker's framework?">Merb</a>
          gems, create a flat Merb application in the instance's
          <code>/var/www/example</code>
          directory, set it up for use with Passenger (create
          <code>public</code>,
          <code>log</code>
          and
          <code>tmp</code>
          directories and add a
          <code>config.ru</code>
          Rack configuration file as required by Passenger) and setup an Apache virtual host in order for Passenger to serve the application. Once this step is complete, navigate to the instance's URL and you should see a page served by Merb.
        </p>
        <p>
          There's another couple of convenient commands in the Capfile,
          <code>cap instance:ssh</code>
          and
          <code>cap instance:stop</code>.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Join online
            <a href="http://www.testkings.com/exam/640-816.htm">testking 640-816</a>
            training program to become IT expert. Download
            <a href="http://www.testkings.com/exam/70-647.htm">testking 70-647</a>
            dumps and
            <a href="http://www.testkings.com/exam/640-553.htm">testking 640-553</a>
            practice exam to competently prepare for real exam.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rails Summit Latin America</title>
    <link href="http://nutrun.com/weblog/2008/08/13/rails-summit-latin-america.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/08/13/rails-summit-latin-america.html</id>
    <updated>2008-08-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 13 2008</span>
        </div>
        <h2 class="title">Rails Summit Latin America</h2>
        <p>
          <a href="http://www.locaweb.com.br/railssummit/">
            <img alt="Rails Summit Latin America" border="0" height="60" src="http://www.akitaonrails.com/assets/2008/8/13/en_souPalestrante_210x60.jpg" title="Rails Summit Latin America" width="210" />
          </a>
        </p>
        <p>
          <a href="http://www.dtsato.com/blog/" title="Danilo Sato">Danilo</a>
          and I will be talking about REST (or maybe not...) at the
          <a href="http://www.locaweb.com.br/railssummit/" title="Serviços de Internet - Locaweb">Rails Summit Latin America</a>,
          October 15, 2008. Many thanks to everyone who's given me the opportunity to participate.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Cheap lunch</title>
    <link href="http://nutrun.com/weblog/2008/08/01/cheap-lunch.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/08/01/cheap-lunch.html</id>
    <updated>2008-08-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 01 2008</span>
        </div>
        <h2 class="title">Cheap lunch</h2>
        <p>
          Is the free lunch really
          <a href="http://www.gotw.ca/publications/concurrency-ddj.htm" title="The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software">over</a>?
          It surely is a question that troubles many software developers. Constrained by the laws of physics, processor manufacturing has definitely changed its rules of play the last few years. It steadily and increasingly becomes near impossible to extract more juice out of a CPUs single core.
        </p>
        <p>Since I started thinking about the implications of the multi-core evolution, I always kept an open eye for situations where taking advantage of multi-core CPUs would profit my work. It is almost certain that the reason has to do with my work being primarily around server side applications, but I'm still to come against many situations where adopting a multi-core influenced approach would have provided additional benefit which could have been achieved by exclusively following this paradigm.</p>
        <p>
          The problem is undeniably evident if we approach it from the side of computational units restricted by the laws of physics. It seems like we will always have a healthy appetite for increased performance, and given we can't get much more out of one core, we must start thinking and programming in a multi-core context. We could do with
          <a href="http://www.openoffice.org/" title="www:        OpenOffice.org - The Free and Open Productivity Suite">OpenOffice</a>
          being more feature rich and faster, thus our desktop needs to be more potent.
        </p>
        <p>At the same time, the web, and networking in general, is increasingly influencing the way we think about, use and create software. Considering the OpenOffice example, there is already a myriad of applications moving similar functionality over to the web. Networking brings distributed solutions to the table, which, alongside other applications, are widely employed for improving software performance.</p>
        <p>Next to physics, the software world is governed by the laws economics. The creation of software must result in some form of social, or financial, or other profit, part of which is achieved by minimizing associated costs. It is almost certain that vendors will claim that a data center of quad-core equipped slices is the next answer to our software woes, but it pays to remember that a cloud of commodity hardware might, in some situations, improve rate of return. The lunch was never free, but today, just like 10 years ago, it's really about how cheap the lunch is.</p>
        <p>The need for concurrency remains an undeniable must, but whether its mainstream representation will be that of multi-core friendly programming or distributed over a network architectures remains to be seen.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Cache watch</title>
    <link href="http://nutrun.com/weblog/2008/07/29/cache-watch.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/07/29/cache-watch.html</id>
    <updated>2008-07-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 29 2008</span>
        </div>
        <h2 class="title">Cache watch</h2>
        <p>
          Web frameworks like
          <a href="http://merbivore.com/" title="Merb | Looking for a hacker's framework?">Merb</a>
          or Rails provide convenient ways for caching output data to static files or other stores, used for improving a web application's performance. Caching is typically handled inside controller classes. With
          <a href="http://merb-cache.rubyforge.org" title="merb-cache docs">merb-cache</a>,
          for example, we can cache an entire page by doing something along the lines of:
        </p>
        <pre>&#x000A;class Foo &lt; Merb::Controller&#x000A;  cache_page :index&#x000A;end</pre>
        <p>
          Expiring cached data is handled with a number of instance methods available to controllers, such as
          <code>expire_page(key)</code>
          or
          <code>expire_all_pages</code>.
          This implies that cache expiration needs to be put explicitly in place inside actions.
        </p>
        <p>The most common event signifying the need for cache expiration is the modification of the underlying data which has at some point been cached. More often than not, this means some sort of write (insert, update, delete) storage operation, which in turn means that cache expiration is closer to storage aware parts of the application rather than controllers. With this in mind, it would be useful to be able to configure cache expiration in a manner similar to that of cache creation, for example:</p>
        <pre>&#x000A;class Foo &lt; Merb::Controller&#x000A;  cache_page :index&#x000A;  cache_watch :foo_store, :bar_store&#x000A;end</pre>
        <p>
          The
          <code>cache_watch :foo_store, :bar_store</code>
          line signifies that any cached artifacts associated with this controller need to be expired whenever a data altering operation takes place in the context of the
          <code>FooStore</code>
          or
          <code>BarStore</code>
          classes.
        </p>
        <p>
          Approaching data altering operations as events presents a good case for employing the Observer pattern in order to enable cache expiration when such events take place. ActiveRecord, for instance, offers means for adding hooks to persistent objects' life cycle methods in the form of
          <a href="http://api.rubyonrails.org/classes/ActiveRecord/Observer.html" title="Class: ActiveRecord::Observer">Observers</a>.
        </p>
        <pre>&#x000A;class FooObserver &lt; ActiveRecord::Observer&#x000A;  def after_save(foo)&#x000A;    expire_cache&#x000A;  end&#x000A;end</pre>
        <p>Putting it all together, we can create a module that enables configuring cache expiration declaratively inside controllers in a way reminiscent to how cache creation is handled.</p>
        <pre>&#x000A;module CacheInvalidator  &#x000A;  def cache_watch(controller, *models)&#x000A;    models.each {|model| (@entries ||= Set.new) &lt;&lt; Entry.new(controller, model)}&#x000A;  end&#x000A;&#x000A;  def activate!&#x000A;    @entries.each do |entry|&#x000A;&#x000A;      return nil if Kernel.const_defined?(entry.class_name)&#x000A;&#x000A;      entry.log&#x000A;&#x000A;      observer = Class.new(ActiveRecord::Observer) do&#x000A;        include CacheInvalidator&#x000A;        observe(entry.model)&#x000A;        define_method(:entry) {entry}&#x000A;      end&#x000A;&#x000A;      Kernel.const_set(entry.class_name, observer)&#x000A;      observer.instance&#x000A;    end&#x000A;  end&#x000A;&#x000A;  module_function :watch&#x000A;  module_function :activate!&#x000A;&#x000A;  def after_save(model)&#x000A;    destroy_cache&#x000A;  end&#x000A;&#x000A;  def after_destroy(model)&#x000A;    destroy_cache&#x000A;  end&#x000A;&#x000A;  private&#x000A;&#x000A;  def destroy_cache&#x000A;    FileUtils.rm_f(entry.file_path) if File.file?(entry.file_path)&#x000A;    FileUtils.rm_r(entry.dir_path) if File.directory?(entry.dir_path)&#x000A;  end&#x000A;&#x000A;  class Entry&#x000A;&#x000A;    attr_reader :controller, :model&#x000A;&#x000A;    def initialize(controller, model)&#x000A;      @controller, @model = controller, model&#x000A;    end&#x000A;&#x000A;    def class_name&#x000A;      (controller.name.gsub(/\:\:/, '') + model.to_s.camelize + "CacheObserver").intern&#x000A;    end&#x000A;&#x000A;    def ==(other)&#x000A;      controller == other.controller &amp;&amp; self.model == other.model&#x000A;    end&#x000A;&#x000A;    def file_path&#x000A;      "#{dir_path}.xml"&#x000A;    end&#x000A;&#x000A;    def dir_path&#x000A;      "#{APP_ROOT}/public/cache/#{@controller.name.underscore}"&#x000A;    end&#x000A;&#x000A;    def log&#x000A;      logger.info "Cache-watching #{model.to_s.camelize} for #{controller}"&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <p>
          By including the
          <code>CacheInvalidator</code>
          module we can declare cache invalidation rules inside controllers.
        </p>
        <pre>&#x000A;class FooController &lt; Merb::Controller&#x000A;  include CacheInvalidator&#x000A;  cache_page :index&#x000A;  cache_watch :FooStore, :BarStore&#x000A;end</pre>
        <p>
          The cache can be activated where app initialization tasks are kept, such as
          <code>init.rb</code>
          in Merb.
        </p>
        <pre>&#x000A;Merb::BootLoader.after_app_loads do&#x000A;   CacheInvalidator.activate!&#x000A;end</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Cacheable HTTP search query results</title>
    <link href="http://nutrun.com/weblog/2008/07/15/cacheable-http-search-query-results.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/07/15/cacheable-http-search-query-results.html</id>
    <updated>2008-07-15T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 15 2008</span>
        </div>
        <h2 class="title">Cacheable HTTP search query results</h2>
        <p>
          I have worked on a number of web applications which required searching catalogs of data based on filtering criteria. The most common implementation I see involves issuing a
          <code>GET</code>
          request to a search service, providing the search criteria as part of the request's query string.
        </p>
        <pre>&#x000A;http://example.com/search?category=music&amp;subcategory=rock&amp;page=7</pre>
        <p>
          This approach does not easily lend itself to static resource caching, one of the most effective ways to improve a web app's performance. Regardless of the level of optimization applied to application code, fine tuning of database queries, even the addition of something like
          <a href="http://www.danga.com/memcached/" title="memcached: a distributed memory object caching system">memcached</a>,
          a request reaching the application server is unlikely to be served more efficiently than if it was handled by a high performance HTTP server like
          <a href="http://nginx.net/" title="nginx">Nginx</a>.
        </p>
        <p>By approaching search queries as RESTful HTTP resources uniquely identified by a URI as opposed to RPC based commands we should be able to cache the results the first time they are processed following a search request.</p>
        <pre>&#x000A;http://example.com/search_results/someuniqueidentifier</pre>
        <p>
          The unique identifier part of the URI can take the form of a hash which, when deserialized, will provide the application with the filter criteria for the search. This assumes that the client and server share a common protocol, one which defines how the hash for the URI is constructed. For example, it is a good idea that there is an expected order for the set of criteria. While searches for
          <code>{category : music, subcategory : rock}</code>
          and
          <code>{subcategory : music, category : rock}</code>
          will produce the same results, using both combinations will cause the resource to be cached twice under two separate URIs, resulting in a performance penalty.
        </p>
        <p>A potential solution can involve Base64 encoding and decoding a string constructed using a predefined format and comprising of the filter criteria.</p>
        <pre>&#x000A;CGI.unescape(identifier).unpack('m')[0] # =&gt; "music,rock,,,,7,30"</pre>
        <p>This method will not be useful for plain HTML fronted websites. It requires a potent enough client with the ability to dynamically construct URIs based on filter criteria. JavaScript, ActionScript or generic web service consumer applications are all good candidates.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Testing web services with ActiveResource</title>
    <link href="http://nutrun.com/weblog/2008/07/10/testing-web-services-with-activeresource.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/07/10/testing-web-services-with-activeresource.html</id>
    <updated>2008-07-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 10 2008</span>
        </div>
        <h2 class="title">Testing web services with ActiveResource</h2>
        <p>
          <a href="http://api.rubyonrails.org/files/vendor/rails/activeresource/README.html" title="File: README">ActiveResource</a>
          can be a useful tool for abstracting away low level HTTP or data marshaling details when testing web services with an XML schema and URI patterns which respect the Rails protocol for REST.
        </p>
        <p>Here's a possible implementation for use in tests that exercise a service from the outside, a sort of black box web service testing approach, if you'd like.</p>
        <pre>&#x000A;def resource(name)&#x000A;  class_name = name.to_s.camelize&#x000A;  return class_name.constantize if Object.const_defined?(class_name.intern)&#x000A;  rsrc = Class.new(ActiveResource::Base) do&#x000A;    self.site = "http://localhost:4001/api"&#x000A;    self.element_name = name.to_s&#x000A;  end&#x000A;  Object.const_set(class_name.intern, rsrc)&#x000A;end</pre>
        <p>
          Let's imagine an API call to
          <code>http://localhost:4001/api/categories.xml</code>
          which returns a list of product categories with their respective subcategories. Following is a potential response to a
          <code>GET</code>
          request to the afore mentioned URI.
        </p>
        <pre>&#x000A;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#x000A;&lt;categories type="array"&gt;&#x000A;  &lt;category&gt;&#x000A;    &lt;id type="integer"&gt;3&lt;/id&gt;&#x000A;    &lt;name&gt;Music&lt;/name&gt;&#x000A;    &lt;subcategories type="array"&gt;&#x000A;      &lt;subcategory type="Category"&gt;&#x000A;        &lt;id type="integer"&gt;4&lt;/id&gt;&#x000A;        &lt;name&gt;Rock&lt;/name&gt;&#x000A;      &lt;/subcategory&gt;&#x000A;      &lt;subcategory type="Category"&gt;&#x000A;        &lt;id type="integer"&gt;5&lt;/id&gt;&#x000A;        &lt;name&gt;Metal&lt;/name&gt;&#x000A;      &lt;/subcategory&gt;&#x000A;    &lt;/subcategories&gt;&#x000A;  &lt;/category&gt;&#x000A;&lt;/categories&gt;</pre>
        <p>
          Invoking
          <code>resource :category</code>
          in the test will provide a
          <code>Category</code>
          class.
          <code>Category</code>
          is an
          <code>ActiveResource</code>
          child which can be used to exercise the
          <code>/categories</code>
          end point of the API.
        </p>
        <pre>&#x000A;class ApiTest &lt; Test::Unit::TestCase&#x000A;  resource :category&#x000A;&#x000A;  def test_categories&#x000A;    categories = Category.find(:all)&#x000A;    assert_equal(1, categories.size)&#x000A;    assert_equal("Music", categories.first.name)&#x000A;  end&#x000A;&#x000A;  def test_subcategories&#x000A;    subcategories = Category.find(:all).first.subcategories&#x000A;    assert_equal(2, subcategories.size)&#x000A;    assert_equal("Metal", subcategories[1].name)&#x000A;  end&#x000A;  &#x000A;  def test_category_creation&#x000A;    Category.create(:name =&gt; "Hacking")&#x000A;    assert_equal(3, Category.find(:all).size)&#x000A;  end&#x000A;end</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Abstract resource</title>
    <link href="http://nutrun.com/weblog/2008/06/30/abstract-resource.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/06/30/abstract-resource.html</id>
    <updated>2008-06-30T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 30 2008</span>
        </div>
        <h2 class="title">Abstract resource</h2>
        <p>A large portion of the internet is governed by HTTP and the World Wide Web in particular is designed based on the REST architectural style. It makes sense to design web applications or web based services in a way that respects and harnesses the web's underlying architecture.</p>
        <p>When it comes to developing web applications, Model-View-Controller (MVC) is one of the dominant architectural patterns current web frameworks are based on. MVC is not restricted to building web apps, on the contrary, its history can be traced back to 1979 and Smalltalk and has been originally applied to the development of applications which involved user interfaces.</p>
        <p>The majority of Ruby web frameworks, especially the ones inspired by Rails, employ MVC and offer some sort of support for REST style application development, typically by defining resources which can be accessed through a URI and manipulated by making use of standard HTTP methods such as GET, PUT, POST, DELETE.</p>
        <p>The above unveils an obvious similarity between the way HTTP resources can be manipulated - the four verbs can fundamentally constitute CRUD operations - and another common tier in web applications nowadays, databases.</p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/2625655482/" title="web-db by nutrunflickr, on Flickr">
            <img alt="web-db" class="boxed" height="324" src="http://farm4.static.flickr.com/3266/2625655482_0a36c0b375.jpg" width="500" />
          </a>
        </p>
        <p>
          Controllers in
          <a href="http://www.merbivore.com/" title="Merb | Looking for a hacker's framework?">Merb</a>,
          Rails or other similar Ruby, or not, web frameworks are a busy abstraction. A controller typically needs to dispatch to relevant actions, consolidate HTTP payloads, deal with sessions, sometimes caching, etc. These controllers are usually REST aware, meaning that they will by default map routed URI HTTP operations to a standard set of actions, namely
          <code>index</code>,
          <code>show</code>,
          <code>create</code>,
          <code>edit</code>,
          <code>update</code>,
          <code>destroy</code>.
        </p>
        <p>If we focus on our application exposing strictly REST resource based interfaces, and assume that these resources directly map to the application's database schema, we can relieve controllers from some of the associated strain by abstracting away the discussed common functionality.</p>
        <pre>&#x000A;module CrudTemplate&#x000A;  def resource&#x000A;    raise "You must define a resource"&#x000A;  end&#x000A;&#x000A;  def index&#x000A;    instance_variable_set(resource_sym_plural, resource.find(:all))&#x000A;    render&#x000A;  end&#x000A;&#x000A;  def show&#x000A;    assign_resource(resource.find(params[:id]))&#x000A;    render&#x000A;  end&#x000A;&#x000A;  alias edit show&#x000A;  alias delete show&#x000A;&#x000A;  def new&#x000A;    assign_resource(resource.new(resource_attrs))&#x000A;    render&#x000A;  end&#x000A;&#x000A;  def create&#x000A;    r = resource.new(resource_attrs)&#x000A;    assign_resource(r)&#x000A;    if r.save&#x000A;      on_create_success(r)&#x000A;    else&#x000A;      on_create_failure(r)&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def on_create_success(r)&#x000A;    redirect(resource_sym)&#x000A;  end&#x000A;&#x000A;  alias on_update_success on_create_success&#x000A;&#x000A;  def on_create_failure(r)&#x000A;    assign_resource(r)&#x000A;    render(:new, :status =&gt; 400)&#x000A;  end&#x000A;&#x000A;  def update&#x000A;    r = resource.find(params[:id])&#x000A;    if r.update_attributes(resource_attrs)&#x000A;      on_update_success(r)&#x000A;    else&#x000A;      on_update_failure(r)&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def on_update_failure(r)&#x000A;    assign_resource(r)&#x000A;    render(:edit)&#x000A;  end&#x000A;&#x000A;  def destroy&#x000A;    if resource.destroy(params[:id])&#x000A;      on_destroy_success(r)&#x000A;    else&#x000A;      on_destroy_failure(r)&#x000A;    end&#x000A;    redirect(resource_sym)&#x000A;  end&#x000A;&#x000A;  def self.included(controller)&#x000A;    controller.show_action(*shown_actions)&#x000A;  end&#x000A;&#x000A;  protected&#x000A;&#x000A;  def resource_attrs&#x000A;    {}&#x000A;  end&#x000A;&#x000A;  def self.shown_actions&#x000A;    [:index, :show, :create, :new, :edit, :update]&#x000A;  end&#x000A;&#x000A;  private&#x000A;&#x000A;  def assign_resource(r)&#x000A;    instance_variable_set(resource_sym, r)&#x000A;  end&#x000A;&#x000A;  def resource_sym&#x000A;    @resource_sym ||= :"@#{resource.name.underscore.split("/").last}"&#x000A;  end&#x000A;&#x000A;  def resource_sym_plural&#x000A;    @resource_sym_plural ||= :"@#{resource.name.underscore.split("/").last.pluralize}"&#x000A;  end&#x000A;end</pre>
        <p>By doing so, we can write controllers that look something like the following.</p>
        <pre>&#x000A;class Reservations &lt; Application&#x000A;  include CrudTemplate&#x000A;&#x000A;  def resource&#x000A;    Reservation&#x000A;  end&#x000A;&#x000A;  def on_create_success&#x000A;    flash[:notice] = "Thank you"&#x000A;    redirect("/")&#x000A;  end&#x000A;&#x000A;  protected&#x000A;&#x000A;  def self.shown_actions&#x000A;    [:new, :create]&#x000A;  end&#x000A;&#x000A;  def resource_attrs&#x000A;    params[:reservation].merge(session[:member])&#x000A;  end&#x000A;end</pre>
        <p>Things are usually more complicated. The above model falls short for the majority of web applications I've worked on. Resources rarely are direct matches to database tables and there is usually good reason for them not to be. Applications involve complex business logic, spanning further from what a set CRUD operations is appropriate for. One might argue that business logic can be incorporated into Models (as in ORM classes), but I generally prefer to avoid keeping business logic near the persistence layer and opt for a database agnostic, rich domain tier.</p>
        <p>This however doesn't imply that controllers shouldn't think in terms of resources. Controllers are close to the web, and the web works well with resources. It suffices for domain layer endpoints that intend to communicate with a controller to expose an interface the controller understands. If we define that interface so that it matches its database specific counterpart, we can achieve the best of both worlds.</p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/2624979159/" title="web-domain-db by nutrunflickr, on Flickr">
            <img alt="web-domain-db" class="boxed" height="324" src="http://farm4.static.flickr.com/3269/2624979159_84c22a413f.jpg" width="500" />
          </a>
        </p>
        <p>
          Controllers can transparently operate on plain ruby components which include an
          <code>AbstractResource</code>
          module (interface) and choose to implement any of its methods, or directly on ORM models, such as
          <code>ActiveRecord</code>
          classes, where appropriate.
        </p>
        <pre>&#x000A;module AbstractResource&#x000A;  attr_reader :params&#x000A;&#x000A;  def initialize(params = {})&#x000A;    @params = params&#x000A;  end&#x000A;&#x000A;  def save&#x000A;    raise "Implement me"&#x000A;  end&#x000A;&#x000A;  def update_attributes(attrs = {})&#x000A;    raise "Implement me"&#x000A;  end&#x000A;&#x000A;  def valid?&#x000A;    raise "Implement me"&#x000A;  end&#x000A;&#x000A;  def errors&#x000A;    raise "Implement me"&#x000A;  end&#x000A;&#x000A;  module ClassMethods&#x000A;    def delete(id)&#x000A;      raise "Implement me"&#x000A;    end&#x000A;&#x000A;    def find(id)&#x000A;      raise "Implement me"&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def self.included(target)&#x000A;    target.extend(ClassMethods)&#x000A;  end&#x000A;end</pre>
        <p>
          P.S. Credit due to
          <a href="http://www.lixo.org/" title="lixo.org">Carlos Villela</a>
          whose observations have been the core and inspiration behind the ideas in this article.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  NWRUG Synthesis Talk</title>
    <link href="http://nutrun.com/weblog/2008/06/16/nwrug-synthesis-talk.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/06/16/nwrug-synthesis-talk.html</id>
    <updated>2008-06-16T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 16 2008</span>
        </div>
        <h2 class="title">NWRUG Synthesis Talk</h2>
        <p>
          <a href="http://no-new-ideas.blogspot.com/" title="No New Ideas">Stuart</a>
          and I will be talking about
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          at this month's
          <a href="http://nwrug.org/" title="North West Ruby User Group | Home">North West Ruby User Group</a>
          meet up in Manchester on Tuesday the 24th of June. Registration details and directions to the venue can be found on the
          <a href="http://nwrug.org/events/june08/" title="North West Ruby User Group | 24th June - Synthesis, Connecting the Dots">event's page at nwrug.org</a>.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Testing Merb controllers</title>
    <link href="http://nutrun.com/weblog/2008/06/13/testing-merb-controllers.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/06/13/testing-merb-controllers.html</id>
    <updated>2008-06-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 13 2008</span>
        </div>
        <h2 class="title">Testing Merb controllers</h2>
        <p>
          One of the features that attracted me to
          <a href="http://www.merbivore.com/" title="Merb | Looking for a hacker's framework?">Merb</a>
          was the ability to test controllers in an independent, lightweight manner. In essence, this involves instantiating a controller class, passing it a
          <a href="http://www.merbivore.com/documentation/merb-core/0.9.3/index.html?a=C00000124&amp;name=FakeRequest" title="Merb | merb-core 0.9.3 API Documentation">FakeRequest</a>
          and calling methods (actions) on the controller object.
        </p>
        <p>Let's consider a controller which collaborates with a service.</p>
        <pre>&#x000A;class Foo &lt; Merb::Controller&#x000A;  def bar&#x000A;    service = Service.new&#x000A;    session[:metal] = service.metal&#x000A;    @zz = service.rock&#x000A;    render&#x000A;  end&#x000A;end&#x000A;&#x000A;class Service&#x000A;  def rock&#x000A;    "zz top"&#x000A;  end&#x000A;&#x000A;  def metal&#x000A;    "metallica"&#x000A;  end&#x000A;end</pre>
        <p>
          Testing the controller is as straightforward as creating an instance of
          <code>Foo</code>,
          setting it up, calling
          <code>bar</code>
          and interrogating it.
        </p>
        <pre>&#x000A;class FooTest &lt; Test::Unit::TestCase&#x000A;  def setup&#x000A;    @foo = Foo.new(Merb::Test::RequestHelper::FakeRequest.new)&#x000A;    @foo.request.session = {}&#x000A;    @foo.bar&#x000A;  end&#x000A;&#x000A;  def test_puts_metallica_in_session&#x000A;    assert_equal("metallica", @foo.session[:metal])&#x000A;  end&#x000A;&#x000A;  def test_assigns_zz_top&#x000A;    assert_equal("zz top", @foo.assigns(:zz))&#x000A;  end&#x000A;end</pre>
        <p>
          I'm not sure why the controller's
          <code>session</code>
          variable has to be explicitly initialized, had it been present would make testing slightly cleaner.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis visualizations</title>
    <link href="http://nutrun.com/weblog/2008/05/29/synthesis-visualizations.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/29/synthesis-visualizations.html</id>
    <updated>2008-05-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 29 2008</span>
        </div>
        <h2 class="title">Synthesis visualizations</h2>
        <p>
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesized testing</a>
          is about accurately simulating object interactions and verifying that each end point of every interaction has been tested to work. The end result of a code base tested employing this strategy forms a specification of the application's ecosystem in terms of object communication.
        </p>
        <p>
          <a href="http://www.dtsato.com" title="Danilo Sato">Danilo</a>
          has been recently contributing some excellent work around visual representations of the above. The code is being developed on the
          <a href="http://github.com/gmalamid/synthesis/tree/experimental" title="gmalamid's synthesis at experimental — GitHub">Synthesis experimental branch</a>
          on
          <a href="http://github.com/" title="Secure Git hosting and collaborative development — GitHub">github</a>.
        </p>
        <p>
          Consider the Synthesis
          <code>test_project</code>
          example.
        </p>
        <pre>&#x000A;class DataBrander&#x000A;  BRAND = "METAL"&#x000A;&#x000A;  def initialize(storage)&#x000A;    @storage = storage&#x000A;  end&#x000A;&#x000A;  def save_branded(data)&#x000A;    @storage.save "#{BRAND} - #{data}"&#x000A;  end&#x000A;&#x000A;  def dont_do_this&#x000A;    @storage.ouch!&#x000A;  end&#x000A;end&#x000A;&#x000A;class Storage&#x000A;  def initialize(filename)&#x000A;    @filename = filename&#x000A;  end&#x000A;&#x000A;  def save(val)&#x000A;    File.open(@filename, 'w') {|f| f &lt; val}&#x000A;  end&#x000A;&#x000A;  def ouch!&#x000A;    raise Problem&#x000A;  end&#x000A;end&#x000A;&#x000A;class Problem &lt; Exception;end</pre>
        <p>Below are the complete specs for the above implementation.</p>
        <pre>&#x000A;describe DataBrander do&#x000A;  it "should save branded to storage" do&#x000A;    storage = Storage.new("")&#x000A;    storage.should_receive(:save).with("METAL - rock")&#x000A;    DataBrander.new(storage).save_branded("rock")&#x000A;  end&#x000A;&#x000A;  it "should delegate problem" do&#x000A;    storage = Storage.new("")&#x000A;    storage.should_receive(:ouch!).and_raise(Problem.new)&#x000A;    proc {DataBrander.new(storage).dont_do_this}.should raise_error(Problem)&#x000A;  end&#x000A;end&#x000A;&#x000A;describe Storage do&#x000A;  it "should save to file" do&#x000A;    begin&#x000A;      Storage.new("test.txt").save("rock")&#x000A;      File.read("test.txt").should == "rock"&#x000A;    ensure&#x000A;      FileUtils.rm_f("test.txt")&#x000A;    end&#x000A;  end&#x000A;  &#x000A;  it "should raise problem on ouch!" do&#x000A;    proc { Storage.new("").ouch! }.should raise_error(Problem)&#x000A;  end&#x000A;end</pre>
        <p>
          A Synthesis run using the
          <a href="http://en.wikipedia.org/wiki/DOT_language" title="DOT language - Wikipedia, the free encyclopedia">DOT</a>
          formatter produces:
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/2533954572/" title="dot-synthesis-passing by nutrunflickr, on Flickr">
            <img alt="dot-synthesis-passing" height="130" src="http://farm3.static.flickr.com/2033/2533954572_72be8b0a8d_o.png" width="500" />
          </a>
        </p>
        <p>
          Removing the
          <code>"should save to file"</code>
          spec will cause the Synthesis task to fail.
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/2533954566/" title="dot-synthesis-failing by nutrunflickr, on Flickr">
            <img alt="dot-synthesis-failing" height="134" src="http://farm4.static.flickr.com/3289/2533954566_228b5e65d4_o.png" width="500" />
          </a>
        </p>
        <p>Below is how a real (relatively small) project looks like.</p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/2533766973/" title="full-project by nutrunflickr, on Flickr">
            <img alt="full-project" height="500" src="http://farm3.static.flickr.com/2219/2533766973_4fc4ca8502.jpg" width="396" />
          </a>
        </p>
        <p>I find the ability to inspect our application modeling through such a representation a very appealing added benefit to the confidence in our system Synthesis provides us with. The DOT formatter will become part of the Synthesis gem as soon as we iron out the few remaining glitches.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  DataMapper without a database</title>
    <link href="http://nutrun.com/weblog/2008/05/29/datamapper-without-a-database.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/29/datamapper-without-a-database.html</id>
    <updated>2008-05-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 29 2008</span>
        </div>
        <h2 class="title">DataMapper without a database</h2>
        <p>
          <a href="http://datamapper.org/" title="DataMapper - DataMapper">DataMapper</a>
          is fast becoming a credible contender in the Ruby ORM field. The first - and only at this early stage - thing that temporarily disappointed me was the following scenario.
        </p>
        <pre>&#x000A;class Foo&#x000A;  include DataMapper::Resource&#x000A;&#x000A;  property :id, Integer, :serial =&gt; true&#x000A;  property :title, String&#x000A;end</pre>
        <p>
          Running this produces
          <code>ArgumentError: Unknown adapter name: default</code>,
          suggesting that a database connection needs to be setup in order to use any objects that include the
          <code>DataMapper::Resource</code>
          module. This is something I would rather not have to do for my dependency neutral test suite, in which all calls to ORM objects are simulated using mocks.
        </p>
        <p>
          I soon realized that DataMapper doesn't require a database connection to be present, but needs to know which adapter to use. If we're not interested in interacting with the database, using
          <code>DataMapper::Adapters::AbstractAdapter</code>
          does the trick.
        </p>
        <pre>&#x000A;DataMapper.setup(:default, "abstract::")&#x000A;&#x000A;class Foo&#x000A;  include DataMapper::Resource&#x000A;&#x000A;  property :id, Integer, :serial =&gt; true&#x000A;  property :title, String&#x000A;end&#x000A;&#x000A;Foo.new(:title =&gt; "metal").title # =&gt; "metal"</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Using Bazaar with RubyForge</title>
    <link href="http://nutrun.com/weblog/2008/05/27/using-bazaar-with-rubyforge.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/27/using-bazaar-with-rubyforge.html</id>
    <updated>2008-05-27T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 27 2008</span>
        </div>
        <h2 class="title">Using Bazaar with RubyForge</h2>
        <p>
          <a href="http://bazaar-vcs.org/" title="Welcome - Bazaar Version Control">Bazaar</a>
          is a distributed version control system written in Python, similar to
          <a href="http://git.or.cz/" title="Git - Fast Version Control System">Git</a>.
          Bazaar places particular focus on usability, it is easy and natural to use, especially for ones visiting or migrating from the world of Git.
        </p>
        <p>
          One of Bazaar's striking features is the ability to publish branches with sftp, provided there is a web server available.
          <a href="http://rubyforge.org/" title="RubyForge: Welcome">RubyForge</a>
          project accounts come with support for both, so publishing a Bazaar branch is as easy as:
        </p>
        <pre>&#x000A;bzr push --create-prefix sftp://you@rubyforge.org/var/www/gforge-projects/your-project/bzr</pre>
        <p>Developers can create their copy of the branch by:</p>
        <pre>&#x000A;bzr branch http://your-project.rubyforge.org/bzr</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  JSynthesis</title>
    <link href="http://nutrun.com/weblog/2008/05/14/jsynthesis.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/14/jsynthesis.html</id>
    <updated>2008-05-14T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 14 2008</span>
        </div>
        <h2 class="title">JSynthesis</h2>
        <p>
          A big thank you to Chris Barrett who has been taking the time to port
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          to Java.
        </p>
        <p>
          <a href="http://code.google.com/p/jsynthesis/" title="jsynthesis - Google Code">JSynthesis</a>
          is registered as a
          <a href="http://code.google.com/p/jsynthesis/" title="jsynthesis - Google Code">GoogleCode project</a>
          and it will surely be integral to my toolkit next time I work on a Java project.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Confidence as a test code metric</title>
    <link href="http://nutrun.com/weblog/2008/05/10/confidence-as-a-test-code-metric.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/10/confidence-as-a-test-code-metric.html</id>
    <updated>2008-05-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 10 2008</span>
        </div>
        <h2 class="title">Confidence as a test code metric</h2>
        <p>
          With testing occupying a major part of our development process, we have often attempted to quantify test code quality. Like many things, it is worth considering how test code ultimately manifests itself in terms of added value. This is why
          <a href="http://no-new-ideas.blogspot.com/" title="No New Ideas">Stuart</a>
          and I recently tend to conclude that, stripped from technically granular details, test code must fundamentally contribute in building confidence that the system under test is complete, a proof that what we've built is and will continue working as intended.
        </p>
        <p>A working system fulfilling its business objectives can be considered complete enough, but, if not easily extensible and maintainable, will not grant itself to the conclusion of being as good as it can be. Advancements in software development methodologies that assist in delivering working software that is easy to extend and maintain - higher level abstractions, modeling and design - have been driven by the need to reduce technical debt. Technical debt can be viewed as the cost of change.</p>
        <p>Test code is code, too. As code bases grow more elaborate, test code also suffers from technical debt, demanding methods to eliminate the factors that hinder its maintainability and extensibility. Present procedures geared towards extensible and maintainable test code are habitually counter-proportional to the amount of confidence they achieve.</p>
        <p class="centered">
          <img alt="The confidence scale" class="boxed" src="http://farm4.static.flickr.com/3143/2479820537_9f597a7c42.jpg" />
        </p>
        <p>
          The different categories on the scale are not mutually exclusive, in fact they are commonly combined as members of a suite that exercises the system in various degrees of instrumentation. Walking the scale from left (empty) to right (full), we move from tests that are generally easier to write, understand, run and maintain but at the same time are less representative of the
          <em>real</em>
          system with all its components integrated.
        </p>
        <p>Dependency neutral tests with all of the tested component's dependencies stubbed are disconnected, vaguely describe how the component interacts with its environment and offer minimal proof that the component will work as specified once a member of the application ecosystem.</p>
        <p>The fundamental difference between interaction based dependency neutral tests and their stubbed counterparts is the accurate interaction specification of collaborating components through the use of mock objects instead of stubs. Here, we concentrate on specifying the contract of communication between two components. Although much closer to how the actual system operates, these tests are still disconnected. Despite the accurate specification of the interaction, we have don't have complete proof that the pieces fit. In particular, interaction based dependency neutral tests do not offer proof that the mocked collaborators have been tested to work.</p>
        <p>It becomes apparent that the major flaw of interaction based dependency neutral tests is their disconnect from their peers.</p>
        <p>As we move towards the "full" side of the confidence scale, tests tend to become larger and more complicated. Wired tests draw a picture much closer to that of the system in its entire form but suffer from poor defect localization (test failures are not always directly related to the intent of the specific test) and disrespect encapsulation (setup code often exposes the behavior of components irrelevant to the context of the current test). The dependency wired tests' contribution to technical debt is much more significant.</p>
        <p>
          Understanding the importance of confidence in our system and aiming to reduce technical debt,
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesized Testing</a>
          suggests a solution that attempts to rectify the disconnect of lightweight, interaction based dependency neutral tests and reduce the need of overarching, prone to technical debt dependency wired tests.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Unambiguous command abbreviation</title>
    <link href="http://nutrun.com/weblog/2008/05/07/unambiguous-command-abbreviation.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/07/unambiguous-command-abbreviation.html</id>
    <updated>2008-05-07T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 07 2008</span>
        </div>
        <h2 class="title">Unambiguous command abbreviation</h2>
        <p>
          When using
          <a href="http://www.rubygems.org/" title="RubyGems Manuals">RubyGems</a>
          from the command line, I almost always type
          <code>sudo gem i synthesis</code>
          as opposed to
          <code>sudo gem install rails</code>,
          the emphasis targeted at using
          <em>"i"</em>
          instead of
          <em>"install"</em>,
          of course. The
          <code>gem</code>
          executable happily understands what command it is being asked to execute when provided with the first few letters of the command, as long as those letters are not ambiguous, i.e. don't clash with the names of other commands. So even though
          <code>sudo gem u foo</code>
          complains that
          <code>Ambiguous command u matches [uninstall, unpack, update]</code>,
          <code>sudo gem uni foo</code>
          will uninstall the specified gem.
        </p>
        <p>Here's how this is implemented in RubyGems.</p>
        <pre>&#x000A;def find_command(cmd_name)&#x000A;  possibilities = find_command_possibilities(cmd_name)&#x000A;  if possibilities.size &gt; 1&#x000A;    raise "Ambiguous command #{cmd_name} matches [#{possibilities.join(', ')}]"&#x000A;  end&#x000A;  if possibilities.size &lt; 1&#x000A;    raise "Unknown command #{cmd_name}"&#x000A;  end&#x000A;&#x000A;  self[possibilities.first]&#x000A;end&#x000A;&#x000A;def find_command_possibilities(cmd_name)&#x000A;  len = cmd_name.length&#x000A;  self.command_names.select { |n| cmd_name == n[0,len] }&#x000A;end</pre>
        <p>
          In the same vein, although not strictly a command abbreviation,
          <a href="http://www.dtsato.com/blog" title="Danilo Sato">Danilo</a>
          pointed out
          <a href="http://git.or.cz/" title="Git - Fast Version Control System">git</a>
          understands abbreviated revision hashes, so it's possible to use something like
          <code>git diff d0a..HEAD</code>
          even with the hash's complete representation being
          <code>d0aa7dd4aa9a95090df1e0b9d0f426d5a5bd56ae</code>.
        </p>
        <p>
          Less typing is almost always a good option to have. The easy to implement
          <em>Unambiguous command abbreviation</em>
          trick adds a subtle usability improvement to command line interfaces and holds a nice treat to the utility's power users.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Distributed programming with Jabber and EventMachine</title>
    <link href="http://nutrun.com/weblog/2008/05/04/distributed-programming-with-jabber-and-eventmachine.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/05/04/distributed-programming-with-jabber-and-eventmachine.html</id>
    <updated>2008-05-04T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 04 2008</span>
        </div>
        <h2 class="title">Distributed programming with Jabber and EventMachine</h2>
        <p>
          <a href="http://www.jabber.org/" title="Jabber.org | open instant messaging and presence">Jabber</a>
          and its underlying protocol
          <a href="http://www.xmpp.org/" title="XMPP Standards Foundation">XMPP</a>
          are typically associated with instant messaging applications, although the breadth and flexibility of the technology allows for implementations that can span further from traditional online chatting.
        </p>
        <p>
          <a href="http://www.ejabberd.im/" title="ejabberd Community Site | the Erlang Jabber/XMPP daemon">ejabberd</a>
          is a fault tolerant and clusterable Jabber/XMPP server written in
          <a href="http://www.erlang.org/" title="Erlang">Erlang</a>
          and presents an interesting option as a simple, lightweight and scalable message transport for distributed applications.
        </p>
        <p>
          <a href="http://rubyforge.org/projects/eventmachine/" title="RubyForge: Ruby/EventMachine: Project Info">EventMachine</a>
          is a simple and fast library for lightweight concurrency in Ruby. Its use mainly involves, but is not limited to, spawning lightweight processes whose execution can be programatically scheduled, easy and fast socket abstractions and an implementation of the Deferrable pattern as introduced by the
          <a href="http://twistedmatrix.com/trac/" title="Twisted">Twisted</a>
          event-driven Python networking engine.
        </p>
        <p>
          When a Ruby class includes the
          <code>EventMachine::Deferrable</code>
          module, it is provided with the ability to accept arbitrary callbacks and errbacks that will get executed when its deferred status changes, in particular when it is set to either
          <code>:succeeded</code>
          or
          <code>:failed</code>.
          Let's look at a deferrable
          <code>Worker</code>
          class which performs a potentially long running operation.
        </p>
        <pre>&#x000A;class Worker&#x000A;  include EM::Deferrable&#x000A;&#x000A;  def heavy_lifting&#x000A;    30.times do |i|&#x000A;      puts "Lifted #{i}"&#x000A;      sleep 0.1&#x000A;    end&#x000A;    set_deferred_status :succeeded&#x000A;  end&#x000A;end</pre>
        <p>
          Inside an EventMachine loop, we can add callbacks to a
          <code>Worker</code>
          instance and dispatch the expensive operation to a separate thread, or an evented process. The program's execution will continue, with any callbacks attached to
          <code>Worker</code>
          executed once its deferred status is set.
        </p>
        <pre>&#x000A;EM.run do&#x000A;  worker = Worker.new&#x000A;  worker.callback {p "done!"}&#x000A;  Thread.new {worker.heavy_lifting; EM.stop}&#x000A;  puts "resuming remaining program operations"&#x000A;end</pre>
        <p>
          Now, let's look at combining
          <code>Worker</code>
          with Jabber to trigger long running jobs. For Jabber server duties, I am using ejabberd on an old laptop running Debian, but there's no reason why a mass online Jabber service like
          <a href="http://www.google.com/talk/" title="Google Talk">Google Talk</a>
          could not be used for playing around with the example. Also, I'm using the
          <a href="http://xmpp4r-simple.rubyforge.org/" title="Jabber::Simple">xmpp4r-simple</a>
          Ruby library, which is a wrapper around
          <a href="http://home.gna.org/xmpp4r/" title="XMPP4R: XMPP/Jabber Library for Ruby">xmpp4r</a>.
        </p>
        <pre>&#x000A;jabber = Jabber::Simple.new("bot@thrash", "password")&#x000A;at_exit{jabber.status(:away, "jabot down")}&#x000A;&#x000A;EM.run do&#x000A;  EM::PeriodicTimer.new(1) do&#x000A;    jabber.received_messages do |message|&#x000A;      case message.body&#x000A;      when "exit" : EM.stop&#x000A;      when "lift" : &#x000A;        EM.spawn do&#x000A;          worker = Worker.new&#x000A;          worker.callback {jabber.deliver(message.from, "Done lifting")}&#x000A;          worker.heavy_lifting&#x000A;        end.notify&#x000A;        jabber.deliver(message.from, "Scheduled heavy job...")&#x000A;      else jabber.deliver(message.from, "Dunno how to #{message.body}")&#x000A;      end&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <p>
          Inside an EventMachine loop, we check for new messages every second. The program understands two commands,
          <code>exit</code>
          and
          <code>lift</code>.
          The first quits the EventMachine loop and ultimately terminates the program's execution. When
          <code>lift</code>
          is received, we instantiate a new
          <code>Worker</code>
          inside a spawned process and add a callback so that the
          <code>Worker</code>
          will notify the command issuer when the job has completed. Worth noting is the use of
          <code>notify</code>
          to schedule the spawned process.
          <code>notify</code>
          returns immediately making work dispatch non-blocking - upon issuing a
          <code>lift</code>
          command twice, a "Scheduled heavy job..." message will be sent to the job issuer twice before the first job completes.
        </p>
        <p>
          I use
          <a href="http://www.adiumx.com/" title="Adium - Download">Adium</a>
          to send commands to the program - an interesting way of remote controlling or interacting with applications. Of course, the real interest lies in using the setup under discussion for inter-app communication. With multicast options, presence discovery, node status updates and more, there is lot to explore in terms of distributed application development, if
          <em>simple</em>
          and
          <em>lightweight</em>
          are two keywords to be found on the highest ranks of your list.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Guaranteed pass you real exam with
            <a href="http://www.testkings.com/exam/VCP-410.htm">testking VCP-410</a>
            course. Sign up for
            <a href="http://www.testkings.com/exam/350-001.htm">testking 350-001</a>
            online training program and get guaranteed success using self study
            <a href="http://www.testkings.com/exam/640-802.htm">testking 640-802</a>
            preparation material.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Ruby mock instance</title>
    <link href="http://nutrun.com/weblog/2008/04/29/ruby-mock-instance.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/29/ruby-mock-instance.html</id>
    <updated>2008-04-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 29 2008</span>
        </div>
        <h2 class="title">Ruby mock instance</h2>
        <p>
          The common pattern for mocking class instances in Ruby involves setting an expectation on the
          <code>new</code>
          method of the class to return an object of the specified type. Consider the following
          <code>User</code>
          and
          <code>Account</code>
          classes.
        </p>
        <pre>&#x000A;class User&#x000A;  attr_reader :name, :email&#x000A;&#x000A;  def initialize(name, email)&#x000A;    @name, @email = name, email&#x000A;  end&#x000A;&#x000A;  def contact&#x000A;    send_email(@email)&#x000A;  end&#x000A;end&#x000A;&#x000A;class Account&#x000A;  def self.create(name, email)&#x000A;    user = User.new(name, email)&#x000A;    user.contact&#x000A;  end&#x000A;end</pre>
        <p>
          The test for the
          <code>Account#create</code>
          method would look like this:
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "mocha"&#x000A;require "test/unit"&#x000A;	&#x000A;class AccountTest &lt; Test::Unit::TestCase&#x000A;  def test_emails_user_on_account_creation&#x000A;    user = User.new("", "")&#x000A;    user.expects(:contact)&#x000A;    User.expects(:new).with("Kirk", "kirk@metallica.com").returns(user)&#x000A;    Account.create("Kirk", "kirk@metallica.com")&#x000A;  end&#x000A;end</pre>
        <p>
          As an alternative, and this is the version I see most often used, a duck typed mock can be used in the place of the "real"
          <code>User</code>
          object.
        </p>
        <pre>&#x000A;class AccountTest &lt; Test::Unit::TestCase&#x000A;  def test_emails_user_on_account_creation&#x000A;    user = mock&#x000A;    user.expects(:contact)&#x000A;    User.expects(:new).with("Kirk", "kirk@metallica.com").returns(user)&#x000A;    Account.create("Kirk", "kirk@metallica.com")&#x000A;  end&#x000A;end</pre>
        <p>
          Both implementations have some potentially undesirable issues worth taking into consideration. None of the two is
          <acronym title="Don't Repeat Yourself">DRY</acronym>,
          since in both cases we need to set a bespoke expectation for the object's instantiation. In the first example, we are actually instantiating a "real"
          <code>User</code>.
          This compromises the dependency neutrality of the test, coupling it with
          <code>User</code>'s
          initialization implementation. The second example, despite its relative convenience, doesn't fully respect the contract between
          <code>Account</code>
          and
          <code>User</code>.
          The interaction specification is inaccurate, because, as far as the application code under test is concerned,
          <code>User#new</code>
          doesn't return an object of type
          <code>Mocha::Mock</code>,
          it returns an instance of
          <code>User</code>.
        </p>
        <p>The following code can be useful in an effort to DRY up code as the one under discussion, whilst driving such interaction specifications closer to the actual contracts they are meant to express.</p>
        <pre>&#x000A;class Object&#x000A;  def self.mock_instance(*args)&#x000A;    class_eval do&#x000A;      alias original_initialize initialize&#x000A;      def initialize()end&#x000A;    end&#x000A;&#x000A;    instance = new&#x000A;    expects(:new).with(*args).returns(instance)&#x000A;&#x000A;    class_eval do&#x000A;      alias initialize original_initialize&#x000A;      undef original_initialize&#x000A;    end&#x000A;&#x000A;    return instance&#x000A;  end&#x000A;end</pre>
        <p>
          Here is how
          <code>AccountTest</code>
          can be written with the above
          <a href="http://mocha.rubyforge.org/" title="Mocha 0.5.6">Mocha</a>
          extension in place.
        </p>
        <pre>&#x000A;class AccountTest &lt; Test::Unit::TestCase&#x000A;  def test_emails_user_on_account_creation&#x000A;    User.mock_instance("Kirk", "kirk@metallica.com").expects(:contact)&#x000A;    Account.create("Kirk", "kirk@metallica.com")&#x000A;  end&#x000A;end</pre>
        <p>
          If
          <a href="http://rspec.info/" title="RSpec-1.1.3: Overview">RSpec</a>
          is your flavor, the same can be achieved with minor modifications in the
          <code>Spec::Mocks::Methods</code>
          module.
        </p>
        <pre>&#x000A;module Spec::Mocks::Methods&#x000A;  def mock_instance(*args)&#x000A;    class_eval do&#x000A;      alias original_initialize initialize&#x000A;      def initialize()end&#x000A;    end&#x000A;&#x000A;    instance = new&#x000A;    should_receive(:new).with(*args).and_return(instance)&#x000A;&#x000A;    class_eval do&#x000A;      alias initialize original_initialize&#x000A;      undef original_initialize&#x000A;    end&#x000A;&#x000A;    return instance&#x000A;  end&#x000A;end</pre>
        <p>
          With the above we can use
          <code>mock_instance</code>
          in specs as such.
        </p>
        <pre>&#x000A;describe Account do&#x000A;  it "should email user on account creation" do&#x000A;    User.mock_instance("Kirk", "kirk@metallica.com").should_receive(:contact)&#x000A;    Account.create("Kirk", "kirk@metallica.com")&#x000A;  end&#x000A;end</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Event registry</title>
    <link href="http://nutrun.com/weblog/2008/04/22/event-registry.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/22/event-registry.html</id>
    <updated>2008-04-22T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 22 2008</span>
        </div>
        <h2 class="title">Event registry</h2>
        <p>During projects I've worked on which involved coding JavaScript, I've had positive experiences enjoying the event driven nature of the language and some bad, especially after code bases grew larger with events firing left and right, producing side effects which were difficult to manage or track down. During the bad days, a centralized way of managing events was often brought up in conversations with colleagues as a means of managing the issue.</p>
        <p>I've long been a fan of the event driven style of programming as a particularly useful alternative promoting loose coupling of system components. Below is the code for a Ruby module which, when included, enables classes to act as event dispatchers. Other classes can subscribe to the events and be notified when an event occurs.</p>
        <pre>&#x000A;module EventDispatcher&#x000A;  module ClassMethods&#x000A;    attr_reader :listeners&#x000A;&#x000A;    def subscribe(event, &amp;callback)&#x000A;      @listeners ||= {}&#x000A;      (@listeners[event] || @listeners[event] = []) &lt;&lt; callback&#x000A;    end&#x000A;&#x000A;    private&#x000A;&#x000A;    def clear_listeners!&#x000A;      @listeners = {}&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def self.included(receiver)&#x000A;    receiver.extend(ClassMethods)&#x000A;  end&#x000A;&#x000A;  def notify(event, *args)&#x000A;    self.class.listeners[event].each {|callback| callback[*args]}&#x000A;  end&#x000A;end</pre>
        <p>Let's consider an example application where the resource management department of an organization hires recruits and upon admission notifies interested services to take relevant action.</p>
        <pre>&#x000A;class RM&#x000A;  include EventDispatcher&#x000A;&#x000A;  def hire(name)&#x000A;    notify(:new_recruit, name)&#x000A;  end&#x000A;end</pre>
        <p>
          What is especially interesting here is how the
          <code>RM</code>
          class doesn't need to know anything about any interested listeners. In order to test
          <code>RM</code>,
          it suffices to ensure that a notification is sent upon calling the
          <code>hire</code>
          method.
        </p>
        <pre>&#x000A;def test_rm_notifies_on_new_hire&#x000A;  service = mock&#x000A;  service.expects(:new_recruit).with("name")&#x000A;  RM.subscribe(:new_recruit) {|name| service.new_recruit(name)}&#x000A;  RM.new.hire("name")&#x000A;end</pre>
        <p>Typically, listeners would directly register their interest to the event by subscribing to it. Let's imagine a welcoming letter is issued to new recruits the moment they join the organization.</p>
        <pre>&#x000A;class WelcomeLetterService&#x000A;  RM.subscribe(:new_recruit) {|name| greet(name)}&#x000A;&#x000A;  def self.greet(name)&#x000A;    "Welcome, #{name}!"&#x000A;  end&#x000A;end</pre>
        <p>
          The first thing to notice is
          <code>WelcomeLetterService</code>'s
          direct coupling to
          <code>RM</code>.
          Additionally, a code base heavily employing this strategy might suffer ill effects similar to the ones described in the JavaScript inspired first paragraph of this article. Allowing a centralized option for event registration and management could serve as possible remedy to the issue.
        </p>
        <pre>&#x000A;module EventRegistry&#x000A;  def register_event_listeners&#x000A;    RM.subscribe(:new_recruit) {|name| WelcomeLetterService.greet(name)}&#x000A;  end&#x000A;&#x000A;  extend self&#x000A;end</pre>
        <p>
          The
          <code>EventRegistry</code>
          module acts as a centralized mechanism for declaring which listeners subscribe to which events. On top of that, the
          <code>WelcomeLetterService</code>
          is now completely oblivious to the
          <code>RM</code>
          class.
        </p>
        <pre>&#x000A;class WelcomeLetterService&#x000A;  def self.greet(name)&#x000A;    "Welcome, #{name}!"&#x000A;  end&#x000A;end</pre>
        <p>Due to the level of decoupling achieved, testing these two components becomes particularly easy.</p>
        <pre>&#x000A;def test_welcome_letter_service_greets_by_name&#x000A;  assert_equal(WelcomeLetterService.greet("Name"), "Welcome, Name!")&#x000A;end&#x000A; &#x000A;def test_event_subscription_wiring&#x000A;  WelcomeLetterService.expects(:greet).with("name")&#x000A;  RM.expects(:subscribe).with(:new_recruit).yields("name")&#x000A;  EventRegistry.register_event_listeners&#x000A;end</pre>
        <p>
          All this ties well with the philosophy behind
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesized Testing</a>,
          where a coherent collection of lightweight tests becomes a major factor of confidence that the system under test is complete, reducing the need for complex overarching tests.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Erubis with Sinatra</title>
    <link href="http://nutrun.com/weblog/2008/04/20/erubis-with-sinatra.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/20/erubis-with-sinatra.html</id>
    <updated>2008-04-20T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 20 2008</span>
        </div>
        <h2 class="title">Erubis with Sinatra</h2>
        <p>
          <a href="http://sinatrarb.com/" title="Nancy">Sinatra</a>
          doesn't yet seem to come with built in support for
          <a href="http://www.kuwata-lab.com/erubis/" title="Erubis: fast and extensible eRuby implementation">Erubis</a>.
          If you want the relative speed bump of Erubis over standard ERB for your Sinatra application, the code below should do the trick.
        </p>
        <pre>&#x000A;module Sinatra::Erb&#x000A;  def erb(content, options={})&#x000A;    begin&#x000A;      require 'erubis'&#x000A;      @@erb_class = Erubis::Eruby&#x000A;    rescue LoadError&#x000A;      require "erb"&#x000A;      @@erb_class = ::ERB&#x000A;    end&#x000A;    render(:erb, content, options)&#x000A;  end&#x000A;&#x000A;  private&#x000A;&#x000A;  def render_erb(content, options = {})&#x000A;    @@erb_class.new(content).result(binding)&#x000A;  end&#x000A;end</pre>
        <p>Application code will not require any modifications, Sinatra will use Erubis if the gem is found in the load path.</p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Merb: render_deferred and render_then_call</title>
    <link href="http://nutrun.com/weblog/2008/04/17/merb-render_deferred-and-render_then_call.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/17/merb-render_deferred-and-render_then_call.html</id>
    <updated>2008-04-17T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 17 2008</span>
        </div>
        <h2 class="title">Merb: render_deferred and render_then_call</h2>
        <p>
          Following the post on
          <a href="http://nutrun.com/weblog/non-blocking-merb-actions/" title="nutrun  » Blog Archive   » Non blocking merb actions">non blocking merb actions</a>,
          it's worth mentioning the
          <a href="http://www.merbivore.com/documentation/merb-core/0.9.2/index.html?a=C00000080&amp;name=ControllerMixin" title="Merb | merb-core 0.9.2 API Documentation">Merb::ControllerMixin</a>
          module, its
          <code>render_deferred</code>
          and
          <code>render_then_call</code>
          methods in particular.
        </p>
        <p>
          <code>render_deferred</code>
          accepts a block argument, a
          <code>proc</code>
          that will be called outside the dispatch
          <code>mutex</code>,
          releasing the merb thread lock.
        </p>
        <pre>&#x000A;class MyController &lt; Merb::Controller&#x000A;  def hello&#x000A;    render "hello"&#x000A;  end&#x000A;&#x000A;  def dont_wait_to_hello&#x000A;    render_deferred { VerySlow.hello }&#x000A;  end&#x000A;end</pre>
        <p>
          Calls to
          <code>/my_controller/hello</code>,
          subsequent to requests to
          <code>/my_controller/dont_wait_to_hello</code>,
          will not have to wait for the latter to complete before being served.
        </p>
        <p>
          As an interesting caveat, because execution of the
          <code>proc</code>
          is outside merb's control, any exceptions raised in the block passed to
          <code>render_deferred</code>
          will not be rescued and redispatched, which suggests that custom error handling needs to be in place.
        </p>
        <p>
          <code>render_then_call</code>
          accepts two arguments, a string that will be returned immediately as a response to the client and a block to be called after the string has been returned.
        </p>
        <pre>&#x000A;class MyController &lt; Merb::Controller&#x000A;  def receive_order&#x000A;    render_then_call("Your pizza is in the oven.") do&#x000A;      bake_pizza&#x000A;      deliver_pizza&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <p>
          In this case, the specified message will be immediately returned, while the long running
          <code>proc</code>
          will be scheduled and executed by Mongrel, allowing orders to keep coming through a single application instance.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Non blocking merb actions</title>
    <link href="http://nutrun.com/weblog/2008/04/16/non-blocking-merb-actions.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/16/non-blocking-merb-actions.html</id>
    <updated>2008-04-16T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 16 2008</span>
        </div>
        <h2 class="title">Non blocking merb actions</h2>
        <p>
          One of the most powerful features in
          <a href="http://www.merbivore.com/" title="Merb | Looking for a better framework?">merb</a>
          is an action's ability to return a
          <code>proc</code>,
          thus releasing the controller block and transferring control to the application server which will be able to handle requests in a parallel manner.
        </p>
        <p>Consider the following controller.</p>
        <pre>&#x000A;class MyController &lt; Application&#x000A;  def hello&#x000A;    render "hello"&#x000A;  end&#x000A;&#x000A;  def wait_and_hello&#x000A;    sleep 10&#x000A;    render "hello"&#x000A;  end&#x000A;&#x000A;  def dont_wait_to_hello&#x000A;    proc { sleep 10; p "hello" }&#x000A;  end&#x000A;end</pre>
        <p>
          Start merb and access
          <code>http://localhost:4000/my_controller/hello</code>
          after visiting
          <code>http://localhost:4000/my_controller/wait_and_hello</code>.
          Ten seconds will pass before
          <code>/my_controller/hello</code>
          is served. A request to
          <code>/my_controller/hello</code>
          will be served immediately regardless of whether a preceding request to
          <code>/my_controller/dont_wait_to_hello</code>
          has completed.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesized Testing slides</title>
    <link href="http://nutrun.com/weblog/2008/04/10/synthesized-testing-slides.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/10/synthesized-testing-slides.html</id>
    <updated>2008-04-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 10 2008</span>
        </div>
        <h2 class="title">Synthesized Testing slides</h2>
        <p>
          For interested parties, here's the
          <a href="/stuff/synthesized-testing-100908.pdf" title="">latest Synthesized Testing slide deck</a>.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Nu Language Event Dispatcher</title>
    <link href="http://nutrun.com/weblog/2008/04/01/nu-language-event-dispatcher.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/04/01/nu-language-event-dispatcher.html</id>
    <updated>2008-04-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 01 2008</span>
        </div>
        <h2 class="title">Nu Language Event Dispatcher</h2>
        <p>
          <a href="http://programming.nu/" title="Programming Nu">Nu</a>
          is an interpreted object oriented language built on top of Objective C, with its syntax and several of its mechanics coming from Lisp, whilst being inspired by Ruby's philosophy.
        </p>
        <p>
          The
          <em>Event Dispatcher</em>
          example is one of my favorite when trying out a new language. I choose it because it's representative of a number of programming language core topics such as lists, maps, closures, OO, etc.
        </p>
        <p>
          I recently spent a short while porting the
          <a href="http://nutrun.com/weblog/io-language-event-dispatcher/" title="nutrun  » Blog Archive   » IO Language Event Dispatcher">IO Language Event Dispatcher example</a>
          in Nu and will be going over my experiment in this article.
        </p>
        <p>
          Bellow is the code for the
          <code>EventDispatcher</code>
          class.
        </p>
        <pre>&#x000A;(class EventDispatcher is NSObject	&#x000A;  (- (id) initialize is&#x000A;    (set @listeners (dict))&#x000A;      self)&#x000A;&#x000A;  (- (void) subscribe:(id)event callback:(id)callback is&#x000A;    (unless (@listeners objectForKey:event)&#x000A;      (@listeners setObject:(array) forKey:event))&#x000A;      ((@listeners objectForKey:event) &lt;&lt; callback))&#x000A;&#x000A;  (- (void) notify:(id)event withArgs:(id)args is&#x000A;    ((@listeners objectForKey:event) each: (do &#x000A;      (callback) (callback args)))))</pre>
        <p>
          There are two prominent methods in this class, namely
          <code>subscribe</code>
          and
          <code>notify</code>.
        </p>
        <p>
          The
          <code>subscribe</code>
          method takes two arguments, the event we're subscribing to and a callback to be invoked every time the specified event takes place. The
          <code>@listeners</code>
          dictionary is constructed using the
          <code>dict</code>
          directive, which is shorthand for creating an
          <code>NSCFDictionary</code>
          instance. For each event, we maintain an array of callbacks. Like
          <code>dict</code>,
          <code>array</code>
          is available for conveniently creating
          <code>NSCFArray</code>
          instances.
        </p>
        <p>
          Whenever
          <code>notify</code>
          is invoked with an event and the relevant arguments, we iterate invoking any callbacks registered for the given event, passing the provided arguments to each.
        </p>
        <p>
          There are two ways that I know of that will allow classes to act as event dispatchers, inheritance being the first.
        </p>
        <pre>&#x000A;(class Factory is EventDispatcher&#x000A;  (ivars)&#x000A;&#x000A;  (- (void) produce:(id)color is&#x000A;    (puts "#{color} product produced")&#x000A;    (self notify:"new product" withArgs:color)))</pre>
        <p>
          Here, we create a
          <code>Factory</code>
          class which extends
          <code>EventDispatcher</code>
          and we define a
          <code>produce</code>
          method which notifies listeners that have subscribed to the "new product" event.
        </p>
        <p>
          Composition is the second, and my preferred, option.
        </p>
        <pre>&#x000A;(class Factory is NSObject&#x000A;  (ivars)&#x000A;&#x000A;  (- (void) produce:(id)color is&#x000A;    (puts "#{color} product produced")&#x000A;    (self notify:"new product" withArgs:color)))&#x000A;&#x000A;(Factory include:EventDispatcher)</pre>
        <p>
          Classes in Nu can be used in a manner similar to that of Module mix-ins in Ruby. Every object in Nu has an
          <code>include</code>
          method which will make a class's instance methods available in another class. The advantage here is that we didn't have to change
          <code>Factory</code>'s
          inheritance tree.
        </p>
        <p>
          Following is a potential event listener that subscribes to the "new product" event and prints out a message every time the event is fired.
        </p>
        <pre>&#x000A;(class ProductWatcher is NSObject&#x000A;  (- (id) watch is&#x000A;    (factory subscribe:"new product" callback:(do (color) &#x000A;      (puts "I see a #{color} product")))))</pre>
        <p>
          To run the example, we can instantiate a
          <code>Factory</code>
          and a
          <code>ProducWatcher</code>
          and fire a few events.
        </p>
        <pre>&#x000A;(set factory ((Factory new) initialize))&#x000A;((ProductWatcher new) watch)&#x000A;&#x000A;(factory produce:"black")&#x000A;(factory produce:"red")&#x000A;(factory produce:"blue")</pre>
        <p>
          The results look like this:
        </p>
        <pre>&#x000A;black product produced&#x000A;I see a black product&#x000A;red product produced&#x000A;I see a red product&#x000A;blue product produced&#x000A;I see a blue product</pre>
        <p>
          There are a lot of reasons as to why I have time for Nu, its combining 3 of my favorite languages not included, greatly simplifying Cocoa development for native Mac and iPhone applications and Objective C's excellent multi-core support to name but a few.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Manchester Synthesized Testing talk</title>
    <link href="http://nutrun.com/weblog/2008/03/31/manchester-synthesized-testing-talk.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/03/31/manchester-synthesized-testing-talk.html</id>
    <updated>2008-03-31T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Mar 31 2008</span>
        </div>
        <h2 class="title">Manchester Synthesized Testing talk</h2>
        <p>
          <a href="http://no-new-ideas.blogspot.com/" title="No New Ideas">Stuart</a>
          and I will be talking about
          <em>Synthesized Testing</em>
          at the University of Manchester on Tuesday April 8, from 18:30. Location and registration details can be found at
          <a href="http://www.thoughtworks.com/what-we-say/events/geek-nights-man_uk.html" title="Geek Nights - ThoughtWorks Manchester">this page</a>
          on the
          <a href="http://www.thoughtworks.com/" title="ThoughtWorks, delivering business value through technology - ThoughtWorks Home">ThoughtWorks</a>
          website. There is no entry fee, but you will need to register, as the venue requires a list of attendees in advance.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis Euruko Talk</title>
    <link href="http://nutrun.com/weblog/2008/03/20/synthesis-euruko-talk.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/03/20/synthesis-euruko-talk.html</id>
    <updated>2008-03-20T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Mar 20 2008</span>
        </div>
        <h2 class="title">Synthesis Euruko Talk</h2>
        <p>
          I am pleased to have been given the opportunity to give a talk on
          <a href="http://nutrun.com/weblog/synthesized-testing-a-primer/" title="nutrun  » Blog Archive   » Synthesized Testing: A primer">Synthesized Testing</a>
          and
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          at this year's
          <a href="http://www.euruko2008.org/" title="EURUKO 2008 — European Ruby Conference, Prague, March 29th – 30th">Euruko</a>
          conference.
        </p>
        <p>
          I have a special liking for Euruko. It combines many of the things I enjoy the most by being a tech heavy, Ruby focused, organized by hackers for hackers gathering.
        </p>
        <p>
          Many of the people whose software has been inspiring me during the last 12 months will be attending, so it's shaping up to be one very interesting weekend.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Transactional in-memory database tests with Sequel and SQLite</title>
    <link href="http://nutrun.com/weblog/2008/03/13/transactional-in-memory-database-tests-with-sequel-and-sqlite.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/03/13/transactional-in-memory-database-tests-with-sequel-and-sqlite.html</id>
    <updated>2008-03-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Mar 13 2008</span>
        </div>
        <h2 class="title">Transactional in-memory database tests with Sequel and SQLite</h2>
        <p>
          Instant feedback is one of the prominent features I look for when referring to "good test code". Tests that involve a database often lack this quality. Here, I am referring to a test's start up time, rather then the actual time a test takes to execute. This needn't be the case when coding in Ruby, given the negligible lag related to firing up an MRI interpreter and the equally fast start up of in-memory SQLite.
        </p>
        <p>
          Using an in-memory database for testing is a common technique for speeding up functional tests that hit the database.
          <a href="http://code.google.com/p/ruby-sequel/" title="ruby-sequel - Google Code">Sequel</a>
          makes using SQLite in its in-memory mode particularly easy.
        </p>
        <pre>&#x000A;require 'rubygems'&#x000A;require 'sequel'&#x000A;&#x000A;DB = Sequel.sqlite  %p
        Database setup code can follow this step.</pre>
        <pre>&#x000A;DB.create_table :items do&#x000A;  column :name, :string&#x000A;end</pre>
        <p>
          The above is for the sake of simplicity, and in a real world scenario it would involve running migrations against the application's current schema.
        </p>
        <p>
          Another useful feature is the ability to run these tests transactionally, that is, never actually change the database state and avoid having to deal with unnecessary database clean up. As an added benefit, a relative speed bump is achieved by not performing database write operations. A simple extension to Test::Unit::TestCase will do the trick.
        </p>
        <pre>&#x000A;class Test::Unit::TestCase&#x000A;  alias run_orig run&#x000A;  def run(result, &amp;block)&#x000A;    DB.transaction do&#x000A;      begin&#x000A;        run_orig(result, &amp;block)&#x000A;      ensure&#x000A;        rollback!&#x000A;      end&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <p>
          Following are some sample tests, with nothing out of the ordinary about them.
        </p>
        <pre>&#x000A;class SomeTest &lt; Test::Unit::TestCase&#x000A;  def test_rock&#x000A;    items = DB[:items]&#x000A;    items.insert(:name =&gt; 'rock')&#x000A;    assert_equal(1, items.count)&#x000A;    assert_equal('rock', items[1][:name])&#x000A;  end&#x000A;&#x000A;  def test_coast_is_clear&#x000A;    assert_equal(0, DB[:items].size)&#x000A;  end&#x000A;&#x000A;  def test_insert_ten_items&#x000A;    items = DB[:items]&#x000A;    10.times { |i| items.insert(:name =&gt; "item_#{i}") }&#x000A;    assert_equal(10, items.size)&#x000A;  end&#x000A;end</pre>
        <p>
          These tests not only execute in milliseconds, but also largely eliminate any noticeable lag before they run.
        </p>
        <pre>&#x000A;TW-MacBook-Pro:Desktop gmalamid$ ruby some_test.rb &#x000A;Loaded suite some_test&#x000A;Started&#x000A;...&#x000A;Finished in 0.002673 seconds.&#x000A;&#x000A;3 tests, 4 assertions, 0 failures, 0 errors</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis 0.0.7</title>
    <link href="http://nutrun.com/weblog/2008/03/10/synthesis-0.0.7.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/03/10/synthesis-0.0.7.html</id>
    <updated>2008-03-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Mar 10 2008</span>
        </div>
        <h2 class="title">Synthesis 0.0.7</h2>
        <p>
          The prominent feature for this release is support for
          <a href="http://rspec.info/" title="RSpec-1.1.3: Overview">RSpec</a>.
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          now has an RSpec adapter which will work with RSpec mocks in specs.
        </p>
        <p>
          The Synthesis Rake task for use with specs will look something like:
        </p>
        <pre>&#x000A;Synthesis::Task.new do |t|&#x000A;  t.adapter = :rspec&#x000A;  t.pattern = 'spec/**/*_spec.rb'&#x000A;end</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis 0.0.5</title>
    <link href="http://nutrun.com/weblog/2008/02/05/synthesis-0.0.5.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/02/05/synthesis-0.0.5.html</id>
    <updated>2008-02-05T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 05 2008</span>
        </div>
        <h2 class="title">Synthesis 0.0.5</h2>
        <p>
          With version 0.0.5,
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          fixes a couple of bugs and adds support for dynamically defined with
          <code>method_missing</code>
          (e.g.
          <a href="http://ar.rubyonrails.org/" title="Active Record -- Object-relation mapping put on rails">Active Record</a>
          dynamic finders)
          <q>magic methods</q>.
        </p>
        <p>
          Thanks to
          <a href="http://ola-bini.blogspot.com/" title="Ola Bini on Java, Lisp, Ruby and AI">Ola</a>
          for the tips and advice.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis 0.0.3</title>
    <link href="http://nutrun.com/weblog/2008/02/03/synthesis-0.0.3.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/02/03/synthesis-0.0.3.html</id>
    <updated>2008-02-03T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 03 2008</span>
        </div>
        <h2 class="title">Synthesis 0.0.3</h2>
        <p>
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          version 0.0.3 has been released -
          <code>sudo gem update</code>
          should do the trick for updating to the new version.
        </p>
        <p>
          New in this release: More meaningful reporting. When the Synthesis task fails, it will report the file name and line number of the tested/untested expectations. Unfortunately, some of the reporting doesn't work as intended with the
          <a href="http://expectations.rubyforge.org/" title="expectations">Expectations</a>
          adapter at the moment.
        </p>
        <p>
          Also, fixed a bug where, during expectation verification, Synthesis was redefining the same method more than once causing a stack overflow.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Queueue version 0.0.5</title>
    <link href="http://nutrun.com/weblog/2008/02/03/queueue-version-0.0.5.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/02/03/queueue-version-0.0.5.html</id>
    <updated>2008-02-03T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 03 2008</span>
        </div>
        <h2 class="title">Queueue version 0.0.5</h2>
        <p>
          <em>Update: Version 0.0.6 is out, cleaning up after 0.0.5.</em>
        </p>
        <p>
          A new version of
          <a href="http://nutrun.com/q/" title="Queueue: A portable Amazon Simple Queue Service stub in Ruby">Queueue</a>,
          <a href="http://nutrun.com/q/releases/queueue-0.0.5.gem" title="">0.0.5</a>,
          is out.
        </p>
        <p>
          It is different to previous Queueue versions in that it now uses
          <a href="http://sinatra.rubyforge.org/" title="Sinatra : Classy web-development dressed in a DSL">Sinatra</a>
          instead of its old, hand crafted dispatcher. There are two reasons behind using Sinatra. One, the dispatch code is now much cleaner. Two, I wanted Queueue to support the
          <a href="http://rack.rubyforge.org/" title="Rack: a Ruby Webserver Interface">Rack</a>
          interface and Sinatra is built on top of Rack.
        </p>
        <p>
          Expect everything else to behave the same as the previous release of Queueue.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rack RESTful Dispatcher</title>
    <link href="http://nutrun.com/weblog/2008/01/29/rack-restful-dispatcher.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/29/rack-restful-dispatcher.html</id>
    <updated>2008-01-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 29 2008</span>
        </div>
        <h2 class="title">Rack RESTful Dispatcher</h2>
        <p>
          Quoting the authors,
          <q>
            <a href="http://rack.rubyforge.org/doc/" title="Rack Documentation">Rack</a>
            provides a minimal, modular and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call
          </q>.
        </p>
        <p>
          To test the theory in practice, I put together a superficial interface for writing RESTful HTTP services by implementing any of the
          <em>DELETE</em>,
          <em>GET</em>,
          <em>POST</em>,
          <em>PUT</em>,
          etc HTTP verbs in Ruby classes.
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "rack"&#x000A;&#x000A;module RestfulDispatcher&#x000A;  def call(env)&#x000A;    request = Rack::Request.new(env)&#x000A;    dispatcher = dispatcher_class.new(request)&#x000A;    body = dispatcher.send(request.request_method.downcase)&#x000A;    [200, {'Content-Type' =&gt; dispatcher.content_type}, body]&#x000A;  end&#x000A;&#x000A;  def dispatcher_class&#x000A;    @dispatcher ||= Class.new(self.class) do&#x000A;      attr_accessor :content_type&#x000A;&#x000A;      def initialize(request)&#x000A;        @request, @content_type = request, 'text/xml'&#x000A;      end&#x000A;    end&#x000A;  end&#x000A;&#x000A;  module SingletonMethods&#x000A;    def start(handler, host, port)&#x000A;      handler.run Rack::Lint.new(self.new), :Host =&gt; host, :Port =&gt; port&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def self.included(receiver)&#x000A;    receiver.extend SingletonMethods&#x000A;  end&#x000A;end</pre>
        <p>
          Let's examine the example one method at a time.
        </p>
        <p>
          All Rack applications must implement one method -
          <code>call</code>
          - which accepts one argument, the
          <em>environment</em>,
          which encapsulates data relevant to the HTTP roundtrip. The
          <code>call</code>
          method must return an array of 3 items: a greater than 100 integer representation of the response status, a hash holding name/value pairs representing the response's header entries and an array of strings - the body of the response.
        </p>
        <p>
          In the case of the
          <code>RestfulDispatcher</code>
          module,
          <code>call</code>
          first wraps
          <code>env</code>
          in
          <code>Rack::Request</code>,
          a convenient and stateless interface to the Rack environment. We then create a new instance of a dispatcher class passing it the Rack Request. We will revisit this in more detail when talking about the
          <code>dispatcher_class</code>
          method. Instantiating a new dispatcher to handle the request should keep things thread safe. We then call a method on the dispatcher instance corresponding to the HTTP verb included in the request. This call should return the response body. Finally, adhering to the Rack standard, we return an array containing the response status code, headers and body.
        </p>
        <p>
          <code>dispatcher_class</code>
          creates a new class by subclassing the service we will be defining and giving it a constructor that accepts a request object. We also expose the content_type field, in case we want to override it anywhere in our service's implementation.
        </p>
        <p>
          Finally, we provide a
          <code>start</code>
          singleton method which we can call to start the service.
        </p>
        <p>
          Mixing the
          <code>RestfulDispatcher</code>
          module in a class will effectively enable the class to act as a standalone RESTful service. All we need to do is implement instance methods that correspond to the HTTP verbs we want the service to respond to.
        </p>
        <pre>&#x000A;class FooService&#x000A;  include RestfulDispatcher&#x000A;&#x000A;  def get&#x000A;    "&lt;test&gt;&lt;/test&gt;"&#x000A;  end&#x000A;end&#x000A;&#x000A;require "thin"&#x000A;FooService.start Rack::Handler::Thin, '127.0.0.1', 2323</pre>
        <p>
          Rack::Request#GET conveniently returns the data received in the request query string (e.g
          <code>http://127.0.0.1/?key=hello</code>)
          as a hash.
        </p>
        <p>
          Thanks to Rack's modular nature, switching from
          <a href="http://code.macournoyer.com/thin/" title="Thin - yet another web server">Thin</a>
          to Mongrel is as easy as replacing the last two lines of the code above with:
        </p>
        <pre>&#x000A;require "mongrel"&#x000A;FooService.start Rack::Handler::Mongrel, '127.0.0.1', 2323</pre>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Join
            <a href="http://www.testkings.com/exam/CISSP.htm">testking CISSP</a>
            training program to prepare for real exam and get guaranteed success using
            <a href="http://www.testkings.com/exam/70-649.htm">testking 70-649</a>
            practice questions and
            <a href="http://www.testkings.com/exam/220-701.htm">testking 220-701</a>
            practice test.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesis 0.0.2</title>
    <link href="http://nutrun.com/weblog/2008/01/27/synthesis-0.0.2.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/27/synthesis-0.0.2.html</id>
    <updated>2008-01-27T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 27 2008</span>
        </div>
        <h2 class="title">Synthesis 0.0.2</h2>
        <p>
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          version 0.0.2 was released a bit more than a week ago carrying one prominent new feature: Validation of simulated method call expectations takes into account the types of the arguments of the method's signature.
        </p>
        <p>
          Let's revisit the example project from the
          <a href="http://nutrun.com/weblog/using-synthesis-with-testunit-and-mocha/" title="Nutrun  » Blog Archive   » Using Synthesis with Test::Unit and Mocha">Using Synthesis with Test::Unit and Mocha</a>
          article and change the
          <code>save</code>
          method of the
          <code>Storage</code>
          class to take an additional argument -
          <code>mode</code>.
        </p>
        <p>
          <em>storage.rb:</em>
        </p>
        <pre>&#x000A;class Storage&#x000A;  def initialize(filename)&#x000A;    @filename = filename&#x000A;  end&#x000A;&#x000A;  def save(val, mode)&#x000A;    File.open(@filename, mode) {|f| f &lt;&lt; val}&#x000A;  end&#x000A;end</pre>
        <p>
          We should also update the corresponding unit test.
        </p>
        <p>
          <em>storage_test.rb:</em>
        </p>
        <pre>&#x000A;require "test/unit"&#x000A;require "fileutils"&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;class StorageTest &lt; Test::Unit::TestCase&#x000A;  def test_saves_to_file&#x000A;    Storage.new('test.txt').save('rock', 'w')&#x000A;    assert_equal 'rock', File.read('test.txt')&#x000A;  ensure&#x000A;    FileUtils.rm_f('test.txt')&#x000A;  end&#x000A;end</pre>
        <p>
          Running
          <code>storage_test.rb</code>
          produces:
        </p>
        <pre>&#x000A;TW-MacBook-Pro:synthesis_example gmalamid$ ruby test/storage_test.rb&#x000A;Loaded suite test/storage_test&#x000A;Started&#x000A;.&#x000A;Finished in 0.004917 seconds.&#x000A;&#x000A;1 tests, 1 assertions, 0 failures, 0 errors</pre>
        <p>
          Also,
          <code>data_brander_test.rb</code>
          still passes.
        </p>
        <pre>&#x000A;TW-MacBook-Pro:synthesis_example gmalamid$ ruby test/data_brander_test.rb&#x000A;Loaded suite test/data_brander_test&#x000A;Started&#x000A;.&#x000A;Finished in 0.00047 seconds.&#x000A;&#x000A;1 tests, 1 assertions, 0 failures, 0 errors</pre>
        <p>
          At this point, all of the application's tests are producing a green build, although there is an obvious bug. The signature of
          <code>Storage#save</code>
          has changed, so
          <code>DataBrander#save_branded</code>
          is broken.
        </p>
        <p>
          With version 0.0.2, Synthesis attempts to address this issue and, indeed, invoking the
          <code>test:synthesis</code>
          task produces:
        </p>
        <pre>&#x000A;W-MacBook-Pro:synthesis_example gmalamid$ rake&#x000A;(in /Users/gmalamid/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002701 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002483 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis]&#x000A;[Synthesis] Tested Expectations:&#x000A;[Synthesis]&#x000A;[Synthesis] Untested Expectations:&#x000A;[Synthesis] Storage.new.save(String)&#x000A;[Synthesis]&#x000A;[Synthesis] Ignoring:&#x000A;[Synthesis]&#x000A;[Synthesis] FAILED.</pre>
        <p>
          In order for the Synthesis task to be successful we need to update
          <code>data_brander.rb</code>
          and the corresponding test to correctly cover the interaction between
          <code>DataBrander</code>
          and
          <code>Storage</code>,
          and, conveniently, fix the associated bug.
        </p>
        <p>
          <em>data_brander.rb:</em>
        </p>
        <pre>&#x000A;class DataBrander&#x000A;  BRAND = "METAL"&#x000A;&#x000A;  def initialize(storage)&#x000A;    @storage = storage&#x000A;  end&#x000A;&#x000A;  def save_branded(data)&#x000A;    @storage.save "#{BRAND} - #{data}", "w"&#x000A;  end&#x000A;end</pre>
        <p>
          <em>data_brander_test.rb:</em>
        </p>
        <pre>&#x000A;%w(test/unit rubygems mocha).each { |l| require l }&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;class DataBranderTest &lt;&lt; Test::Unit::TestCase&#x000A;  def test_saves_branded_to_storage&#x000A;    storage = Storage.new 'whatever'&#x000A;    storage.expects(:save).with('METAL - rock', 'w')&#x000A;    DataBrander.new(storage).save_branded 'rock'&#x000A;  end&#x000A;end</pre>
        <p>
          This will hopefully tip the confidence scale a bit closer to the point where we feel it's safe enough to omit having to write some functional tests that would prove the interacting members will integrate nicely when used together.
        </p>
        <pre>&#x000A;TW-MacBook-Pro:synthesis_example gmalamid$ rake&#x000A;(in /Users/gmalamid/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002724 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002409 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis]&#x000A;[Synthesis] SUCCESS.</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  rubyworks-ec2 0.1.4</title>
    <link href="http://nutrun.com/weblog/2008/01/26/rubyworks-ec2-0.1.4.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/26/rubyworks-ec2-0.1.4.html</id>
    <updated>2008-01-26T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 26 2008</span>
        </div>
        <h2 class="title">rubyworks-ec2 0.1.4</h2>
        <p>
          The
          <a href="http://rubyworks-ec2.rubyforge.org/" title="rubyworks-ec2 : RubyWorks Production Stack on EC2">rubyworks-ec2</a>
          project is now hosted on
          <a href="http://rubyforge.org/" title="RubyForge: Welcome">RubyForge</a>.
          The gem can be installed by invoking
          <code>gem i rubyworks-ec2</code>
          or can be downloaded from the project's
          <a href="http://rubyforge.org/projects/rubyworks-ec2/" title="RubyForge: rubyworks-ec2: Project Info">RubyForge page</a>.
        </p>
        <p>
          Thanks to Markus Bengts's input, version 0.1.4 adds a list of new features to the mix.
        </p>
        <p>
          A
          <code>capify-for-ec2</code>
          executable that will create or update the existing
          <code>Capfile</code>
          and
          <code>config/deploy.rb</code>
          files to include the EC2 Capistrano recipes. It will also copy server configuration files (e.g. config files for apache2, monit, mysql, etc) to your local working copy's
          <code>config/server</code>
          directory.
        </p>
        <p>
          Think of
          <code>config/server</code>
          as a local copy of the EC2 server instance's filesystem. The files in
          <code>config/server</code>
          can be edited before bootstrapping the instance. They will be copied to the EC2 instance when
          <code>cap instance:bootstrap</code>
          is invoked.
        </p>
        <p>
          The default configuration has been changed so that Monit manages MySQL, and MySQL is allowed to use more RAM (up to about 600MB if needed). MySQL and Monit are configured so that slow queries are written to a log file (default slow query limit is 2 seconds). Monit alerts if that file has been changed.
        </p>
        <p>
          This release also allows specifying additional apt packages and gems to install on
          <code>cap instance:bootstrap</code>.
          To do so, add packages and gems to the lists that were copied to
          <code>config/deploy.rb</code>
          by
          <code>capify-for-ec2</code>.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Using Synthesis with Test::Unit and Mocha</title>
    <link href="http://nutrun.com/weblog/2008/01/13/using-synthesis-with-testunit-and-mocha.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/13/using-synthesis-with-testunit-and-mocha.html</id>
    <updated>2008-01-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 13 2008</span>
        </div>
        <h2 class="title">Using Synthesis with Test::Unit and Mocha</h2>
        <p>
          <a href="http://synthesis.rubyforge.org">Synthesis</a>
          is a Ruby library that applies a
          <a href="http://nutrun.com/weblog/synthesized-testing-a-primer">Synthesized Testing</a>
          strategy, aiming to reduce the number of large, slow and brittle functional tests.
        </p>
        <p>Imagine an example project with the following contents:</p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ ls -R&#x000A;Rakefile	lib		test&#x000A;&#x000A;./lib:&#x000A;synthesis_example	synthesis_example.rb&#x000A;&#x000A;./lib/synthesis_example:&#x000A;data_brander.rb	storage.rb&#x000A;&#x000A;./test:&#x000A;data_brander_test.rb	storage_test.rb</pre>
        <p>
          <em>synthesis_example.rb:</em>
        </p>
        <pre>&#x000A;$: &lt;&lt; File.dirname(__FILE__) + '/'&#x000A;require "synthesis_example/data_brander"&#x000A;require "synthesis_example/storage"</pre>
        <p>
          <em>data_brander.rb:</em>
        </p>
        <pre>&#x000A;class DataBrander&#x000A;  BRAND = "METAL"&#x000A;&#x000A;  def initialize(storage)&#x000A;    @storage = storage&#x000A;  end&#x000A;&#x000A;  def save_branded(data)&#x000A;    @storage.save "#{BRAND} - #{data}"&#x000A;  end&#x000A;end</pre>
        <p>
          <em>storage.rb:</em>
        </p>
        <pre>&#x000A;class Storage&#x000A;  def initialize(filename)&#x000A;    @filename = filename&#x000A;  end&#x000A;&#x000A;  def save(val)&#x000A;    File.open(@filename, 'w') {|f| f &lt;&lt; val}&#x000A;  end&#x000A;end</pre>
        <p>
          <em>Rakefile:</em>
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "synthesis/task"&#x000A;&#x000A;task :default =&gt; 'synthesis:test'&#x000A;Synthesis::Task.new</pre>
        <p>
          <em>data_brander_test.rb:</em>
        </p>
        <pre>&#x000A;%w(test/unit rubygems mocha).each { |l| require l }&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;class DataBranderTest &lt; Test::Unit::TestCase&#x000A;  def test_saves_branded_to_storage&#x000A;    storage = Storage.new 'whatever'&#x000A;    storage.expects(:save).with('METAL - rock')&#x000A;    DataBrander.new(storage).save_branded 'rock'&#x000A;  end&#x000A;end</pre>
        <p>
          Running
          <em>data_brander_test.rb</em>
          produces:
        </p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ ruby test/data_brander_test.rb&#x000A;Loaded suite test/data_brander_test&#x000A;Started&#x000A;.&#x000A;Finished in 0.000487 seconds.&#x000A;&#x000A;1 tests, 1 assertions, 0 failures, 0 errors</pre>
        <p>
          Supposing we haven't written any tests for
          <code>Storage</code>
          yet, the outcome of the
          <code>synthesis:test</code>
          task is:
        </p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ rake synthesis:test&#x000A;(in /Users/gm/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;.&#x000A;Finished in 0.00063 seconds.&#x000A;&#x000A;1 tests, 1 assertions, 0 failures, 0 errors&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;.&#x000A;Finished in 0.000575 seconds.&#x000A;&#x000A;1 tests, 1 assertions, 0 failures, 0 errors&#x000A;[Synthesis]&#x000A;[Synthesis] Tested Expectations:&#x000A;[Synthesis]&#x000A;[Synthesis] Untested Expectations:&#x000A;[Synthesis] Storage.new.save&#x000A;[Synthesis]&#x000A;[Synthesis] Ignoring:&#x000A;[Synthesis]&#x000A;[Synthesis] FAILED.</pre>
        <p>
          Synthesis will make a first pass at running the project's tests collecting all simulated object interaction expectations. Then, it will run the tests again, verifying that the concrete implementations of the simulated expectation members have been covered in the tests.
        </p>
        <p>
          In this example, the Synthesis task fails, reporting that the concrete implementation of the
          <code>save</code>
          instance method of
          <code>Storage</code>
          has not been tested. Let's fix that.
        </p>
        <p>
          <em>storage_test.rb:</em>
        </p>
        <pre>&#x000A;require "test/unit"&#x000A;require "fileutils"&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;class StorageTest &lt; Test::Unit::TestCase&#x000A;  def test_saves_to_file&#x000A;    Storage.new('test.txt').save('rock')&#x000A;    assert_equal 'rock', File.read('test.txt')&#x000A;  ensure&#x000A;    FileUtils.rm_f('test.txt')&#x000A;  end&#x000A;end</pre>
        <p>
          Running
          <code>rake</code>
          again:
        </p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ rake&#x000A;(in /Users/gm/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002721 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Loaded suite /usr/bin/rake&#x000A;Started&#x000A;..&#x000A;Finished in 0.002342 seconds.&#x000A;&#x000A;2 tests, 2 assertions, 0 failures, 0 errors&#x000A;[Synthesis]&#x000A;[Synthesis] SUCCESS.</pre>
        <p>
          Traditionally, and on a project of a more realistic size than the example one, we would have to perform some sort of functional testing around the integration of
          <code>BrandingService</code>
          and
          <code>Storage</code>.
          Synthesis aims to provide enough confidence in order to eliminate the need for tedious functional tests.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Using Synthesis with Expectations</title>
    <link href="http://nutrun.com/weblog/2008/01/13/using-synthesis-with-expectations.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/13/using-synthesis-with-expectations.html</id>
    <updated>2008-01-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 13 2008</span>
        </div>
        <h2 class="title">Using Synthesis with Expectations</h2>
        <p>
          This example builds on the test project described in
          <a href="http://nutrun.com/weblog/using-synthesis-with-testunit-and-mocha/" title="Nutrun  » Blog Archive   » Using Synthesis with Test::Unit and Mocha">Using Synthesis with Test::Unit and Mocha</a>.
          Instead of a combination of Test::Unit and
          <a href="http://mocha.rubyforge.org/" title="Mocha 0.5.6">Mocha</a>,
          we will be using
          <a href="http://synthesis.rubyforge.org/" title="synthesis">Synthesis</a>
          in conjunction with the
          <a href="http://expectations.rubyforge.org/" title="expectations">Expectations</a>
          lightweight testing framework.
        </p>
        <p>
          Synthesis comes with an Expectations adapter. The rake task looks like this:
        </p>
        <p>
          <em>Rakefile:</em>
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "synthesis/task"&#x000A;&#x000A;task :default =&gt; 'synthesis:test'&#x000A;Synthesis::Task.new do |t|&#x000A;  t.adapter = :expectations&#x000A;end</pre>
        <p>
          Following are the project's tests, rewritten with the Expectations library.
        </p>
        <p>
          <em>data_brander_test.rb:</em>
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "expectations"&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;Expectations do&#x000A;  expect Storage.new('yep').to_receive(:save).with('METAL - rock') do |s|&#x000A;    DataBrander.new(s).save_branded 'rock'&#x000A;  end&#x000A;end</pre>
        <p>
          Running this test will produce:
        </p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ ruby test/data_brander_test.rb&#x000A;Expectations .&#x000A;Finished in 0.001 seconds&#x000A;&#x000A;Success: 1 fulfilled</pre>
        <p>
          Because we haven't yet written a test for the simulated
          <code>save</code>
          method on the mocked
          <code>Storage</code>
          instance, the Synthesis Rake task will fail.
        </p>
        <pre>&#x000A;Macintosh-4:synthesis_example gm$ rake synthesis:test&#x000A;(in /Users/gm/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Expectations .&#x000A;Finished in 0.001 seconds&#x000A;&#x000A;Success: 1 fulfilled&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Expectations .&#x000A;Finished in 0.001 seconds&#x000A;&#x000A;Success: 1 fulfilled&#x000A;[Synthesis]&#x000A;[Synthesis] Tested Expectations:&#x000A;[Synthesis]&#x000A;[Synthesis] Untested Expectations:&#x000A;[Synthesis] Storage.new.save&#x000A;[Synthesis]&#x000A;[Synthesis] Ignoring:&#x000A;[Synthesis]&#x000A;[Synthesis] FAILED.</pre>
        <p>
          Writing a test for the concrete implementation of
          <code>Storage.new.save</code>
          fixes the issue.
        </p>
        <p>
          <em>storage_test.rb:</em>
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "expectations"&#x000A;require File.dirname(__FILE__) + "/../lib/synthesis_example"&#x000A;&#x000A;Expectations do&#x000A;  expect "rock" do&#x000A;    begin&#x000A;      Storage.new('test.txt').save('rock')&#x000A;      File.read 'test.txt'&#x000A;    ensure&#x000A;      FileUtils.rm_f 'test.txt'&#x000A;    end&#x000A;  end&#x000A;end</pre>
        <pre>Macintosh-4:synthesis_example gm$ rake synthesis:test&#x000A;(in /Users/gm/devel/ruby/whatever_code/synthesis_example)&#x000A;[Synthesis] Collecting expectations...&#x000A;Expectations ..&#x000A;Finished in 0.00199 seconds&#x000A;&#x000A;Success: 2 fulfilled&#x000A;[Synthesis] Verifying expectation invocations...&#x000A;Expectations ..&#x000A;Finished in 0.00174 seconds&#x000A;&#x000A;Success: 2 fulfilled&#x000A;[Synthesis]&#x000A;[Synthesis] SUCCESS.</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Synthesized Testing: A primer</title>
    <link href="http://nutrun.com/weblog/2008/01/12/synthesized-testing-a-primer.html" type="text/html" />
    <id>http://nutrun.com/weblog/2008/01/12/synthesized-testing-a-primer.html</id>
    <updated>2008-01-12T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jan 12 2008</span>
        </div>
        <h2 class="title">Synthesized Testing: A primer</h2>
        <p>
          <em>... or, reducing the volume and increasing the value of test code by connecting the dots.</em>
        </p>
        <p>
          Beside other objectives, test code aims to provide proof and confidence that the application code under test works as expected and as specified.
        </p>
        <p>
          Tests are often classified under different categories, namely
          <em>Unit Tests</em>,
          <em>Functional Tests</em>,
          <em>Integration Tests</em>,
          <em>Acceptance Tests</em>,
          etc, each of which attempts to verify the system components' intended functionality in various degrees of instrumentation.
        </p>
        <p>
          Unit tests, for example, are employed for testing individual system components in isolation from their peers or environment. Unit tests rarely connect to the database, touch the filesystem or access environment resources.
        </p>
        <p>
          A typical test code-base will contain a layer of Functional or Integration tests sitting directly above the Unit Test layer. These still don't test the system in its whole, deployed form. They concentrate on testing the functionality of application components with their system dependencies present and wired.
        </p>
        <p>
          At the functional testing level, testing a Service which accesses a Repository retrieving records from a database will involve opening an actual database connection, setting up and testing against real data.
        </p>
        <pre>&#x000A;dependency = DependencyRepositoty.create_dependency('Foo')&#x000A;record = Repository.create_record('Bar', dependency)&#x000A;assert_equal :record, Service.report(record.id)</pre>
        <p>
          Functional tests are often deemed necessary in order to achieve a sense of confidence that the pieces still work when put together. At the same time, because of their relative complexity, functional tests tend to become long, slow to run, difficult to write and maintain. In essence, the bulk of Functional Tests violates many of the qualities one might attribute to good test code.
        </p>
        <p>
          The use of Mock Objects is a technique commonly found in Unit Tests aiming to verify interactions between the objects under test. Using Mocks, we concentrate on validating declared expectations of those interactions without relying on every single component to be loaded in order for the test to run.
        </p>
        <pre>&#x000A;Repository.expects(:find).with(1).returns(:record)&#x000A;assert_equal :record, Service.report(1)</pre>
        <p>
          By examining the two code examples, it is apparent there is overlap between what they logically test. Both verify the Service's behavior in regards to its communication with the Repository and its handling of the data involved between the call to
          <code>Service.report</code>
          and this interaction.
        </p>
        <p>
          Behind the scenes, the functional test also ensures that the database connection works, the wiring between the Repository and the database adapter is functional, etc. These verifications are irrelevant under the context of what is being tested here. They also end up duplicated in all Functional tests that involve the Repository.
        </p>
        <p>
          Tests with functional dependencies are brittle and tend to break for the wrong reasons.
        </p>
        <p>
          Furthermore, it is common for test code-bases to involve a layer of Acceptance tests which are executed against the entire system in - or close to - its deployed form. As a result there is more testing overlap, this time between what the Functional and Acceptance tests are targeting.
        </p>
        <p>
          The example unit test proves that a call to
          <code>Service.report(1)</code>
          will result to a call to
          <code>Repository.find(1)</code>.
          It further asserts that the value returned by the call to
          <code>Repository.find(1)</code>
          is the one returned by
          <code>Service.report(1)</code>.
        </p>
        <p>
          The association of the
          <code>Service.report</code>
          method's concrete implementation to a test attests that the actual implementation of this method has been tested.
        </p>
        <p>
          This test doesn't offer enough proof the components under test will work as intended as part of the deployed application. In particular, there is no evidence
          <code>Repository.find</code>
          has been tested to work.
        </p>
        <p>
          A code-base with adequate test coverage must contain tests verifying the Repository's concrete implementation's functionality.
        </p>
        <p>
          A programmer observing that Object
          <em>A</em>
          expects to receive a call on method
          <em>B</em>
          when method
          <em>C</em>
          is called on Object
          <em>D</em>,
          having proven that Object
          <em>A</em>'s
          <em>B</em>
          method works, mentally processes this information to conclude that the two Object members will work together as expected under the specified interaction.
        </p>
        <p>
          If we could correlate the verified interaction expectations with tests against their concrete counterparts, we should be able to provide enough evidence that the dots will indeed work together once connected.
        </p>
        <p>
          By doing so, we can significantly reduce the volume and complexity of the functional tests, achieving a leaner, more meaningful, more robust test code-base.
        </p>
        <p>
          As proof of concept,
          <a href="http://synthesis.rubyforge.org">Synthesis</a>
          is a Ruby implementation of the Synthesized Testing theory. It analyzes test code by collecting Mock Object expectations and verifies that their concrete implementations have been tested.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            We offer best quality
            <a href="http://www.testkings.com/exam/70-432.htm">testking 70-432</a>
            study material to help you pass real exam on first try. Download the
            <a href="http://www.testkings.com/exam/EX0-101.htm">testking EX0-101</a>
            sample questions and
            <a href="http://www.testkings.com/exam/642-832.htm">testking 642-832</a>
            mock test  to practice and pass real exam with highest score guaranteed.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  rubyworks-ec2 0.1.3</title>
    <link href="http://nutrun.com/weblog/2007/12/10/rubyworks-ec2-0.1.3.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/12/10/rubyworks-ec2-0.1.3.html</id>
    <updated>2007-12-10T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Dec 10 2007</span>
        </div>
        <h2 class="title">rubyworks-ec2 0.1.3</h2>
        <p>
          New in version
          <a href="http://www.nutrun.com/rwec2/releases/rubyworks-ec2-0.1.3.gem" title="">0.1.3</a>
          of
          <a href="http://www.nutrun.com/rwec2/" title="rubyworks-ec2 : RubyWorks Production Stack on EC2">rubyworks-ec2</a>:
        </p>
        <p>
          Added
          <code>db:list_backups</code>
          task for displaying a list of all S3 MySQL backups.
        </p>
        <p>
          The
          <code>db:restore</code>
          task now accepts an optional
          <code>VERSION</code>
          argument for restoring the instance's database to the specified revision. If
          <code>VERSION</code>
          is omitted the task defaults to the latest backup found on S3. For example:
        </p>
        <pre>&#x000A;cap db:list_backsups&#x000A;&#x000A;mysql-backup-1197246181&#x000A;mysql-backup-1197318602&#x000A;mysql-backup-1197318629&#x000A;mysql-backup-1197318764&#x000A;&#x000A;cap db:restore VERSION=1197318629</pre>
        <p>
          Fixed a bug on the
          <code>image:backup</code>
          task.
          <em>Thanks to Nick Kallen for noticing and reporting this</em>.
        </p>
        <p>
          The following needs to be set in
          <code>deploy.rb</code>
          in order for the
          <code>image:backup</code>
          task to work properly:
        </p>
        <pre>&#x000A;set :bucket, "name-the-bucket-that-will-hold-the-image"</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  rubyworks-ec2 0.1.2</title>
    <link href="http://nutrun.com/weblog/2007/12/05/rubyworks-ec2-0.1.2.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/12/05/rubyworks-ec2-0.1.2.html</id>
    <updated>2007-12-05T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Dec 05 2007</span>
        </div>
        <h2 class="title">rubyworks-ec2 0.1.2</h2>
        <p>
          <a href="http://nutrun.com/rwec2" title="rubyworks-ec2">rubyworks-ec2</a>
          version 0.1.2 is available for
          <a href="http://nutrun.com/rwec2/releases/rubyworks-ec2-0.1.2.gem">download</a>.
          The update fixes a bug in the Apache vhost configuration.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  rubyworks-ec2 0.1.1</title>
    <link href="http://nutrun.com/weblog/2007/11/30/rubyworks-ec2-0.1.1.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/11/30/rubyworks-ec2-0.1.1.html</id>
    <updated>2007-11-30T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 30 2007</span>
        </div>
        <h2 class="title">rubyworks-ec2 0.1.1</h2>
        <p>
          As of version
          <a href="http://nutrun.com/rwec2/releases/rubyworks-ec2-0.1.1.gem">0.1.1</a>,
          <a href="http://nutrun.com/rwec2">rubyworks-ec2</a>
          encrypts S3 MySQL back ups using the
          <a href="http://ezcrypto.rubyforge.org/">ezcrypto</a>
          library's AES 128 CBC block cipher. The key used for the encryption transformation is the AWS SECRET ACCESS KEY.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  RubyWorks Production Stack on Amazon EC2</title>
    <link href="http://nutrun.com/weblog/2007/11/20/rubyworks-production-stack-on-amazon-ec2.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/11/20/rubyworks-production-stack-on-amazon-ec2.html</id>
    <updated>2007-11-20T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Nov 20 2007</span>
        </div>
        <h2 class="title">RubyWorks Production Stack on Amazon EC2</h2>
        <p>
          <a href="http://nutrun.com/rwec2">rubyworks-ec2</a>
          automates deploying Ruby On Rails applications to an
          <a href="http://aws.amazon.com/ec2">Amazon Elastic Compute Cloud (EC2)</a>
          instance using the
          <a href="http://rubyworks.rubyforge.org/" title="RubyWorks Production Stack">RubyWorks Production Stack</a>.
          It is a collection of
          <a href="http://www.capify.org/" title="Capistrano:  Home">Capistrano 2.0</a>
          recipes and utilities, not an
          <acronym title="Amazon Machine Image">AMI</acronym>.
        </p>
        <p>
          Using rubyworks-ec2 will effectively bootstrap a clean Debian Etch AMI, installing the RubyWorks Production Stack, Apache 2, MySQL, utilities and cron jobs for backing up and restoring the database from Amazon S3.
        </p>
        <p>
          The running stack comprises of Apache 2 serving static content,
          <a href="http://haproxy.1wt.eu/" title="HAProxy - The Reliable, High Performance TCP/HTTP Load Balancer">HAProxy</a>
          load balancing Mongrels, 4
          <a href="http://mongrel.rubyforge.org/" title="Mongrel: Home">Mongrel</a>
          instances,
          <a href="http://www.tildeslash.com/monit/" title="monit">monit</a>
          monitoring HAProxy, Mongrel and the OS and MySQL with its
          <code>datadir</code>
          pointing to the
          <code>/mnt</code>
          partition of the AMI.
        </p>
        <p>
          Deploying to a new AMI instance post first time setup is achieved with 3 commands -
          <code>cap instance:start</code>,
          <code>cap instance:bootstrap</code>
          and
          <code>cap deploy</code>
          - or 4, in case there's a need to migrate the database.
        </p>
        <h3>Prerequisites</h3>
        <p>
          A working Amazon EC2 account, based on the instructions described in the
          <a href="http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/" title="Amazon Elastic Compute Cloud">EC2 Getting Started Guide</a>
          and a working Rails application that's setup to use MySQL in Production mode, has Rails and any required gems unpacked in its
          <code>vendor</code>
          directory and is versioned in a Subversion repository.
        </p>
        <h3>Getting started</h3>
        <p>
          Following the
          <a href="http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/" title="Amazon Elastic Compute Cloud">EC2 Getting Started Guide</a>,
          you should have a directory named
          <code>.ec2</code>
          in your home directory containing a PEM encoded signed X.509 certificate and an unencrypted, PEM encoded RSA private key that corresponds to the X.509 certificate.
        </p>
        <p>
          You should also have an RSA keypair named something similar to
          <code>id_rsa-gsg-keypair</code>.
          <strong>Copy this file to the</strong>
          <code>$HOME/.ec2/</code>
          <strong>directory</strong>.
          If you have the public counterpart to this key - in this case
          <code>id_rsa-gsg-keypair.pub</code>
          - copy it to
          <code>$HOME/.ec2</code>
          as well. If you don't, we'll get it once we start the AMI.
          <em>This step is crucial in order for Capistrano to be able to connect to the instance</em>.
        </p>
        <p>
          <a href="http://nutrun.com/rwec2/releases/rubyworks-ec2-0.1.0.gem">Download</a>
          the rubyworks-ec2 gem and install it:
        </p>
        <pre>&#x000A;sudo gem i rubyworks-ec2-&lt;version&gt;.gem</pre>
        <p>
          Invoke
          <code>capify .</code>
          from the top directory of the Rails application. This will create two files,
          <code>Capfile</code>
          and
          <code>config/deploy.rb</code>.
        </p>
        <p>
          Require rubyworks-ec2 in
          <code>Capfile</code>:
        </p>
        <pre>&#x000A;require "rubyworks-ec2"</pre>
        <p>
          Next, configure the required deployment properties in
          <code>config/deploy.rb</code>:
        </p>
        <pre>&#x000A;set :instance_id, ""&#x000A;set :instance_url, ""&#x000A;&#x000A;set :application, "shotgun_blues"&#x000A;set :repository, "http://svn.shotgun.com/blues/trunk"&#x000A;&#x000A;role :app, instance_url&#x000A;role :web, instance_url&#x000A;role :db,  instance_url, :primary =&gt; true&#x000A;&#x000A;set :keypair, "gsp-keypair"&#x000A;set :account_id, "123456789098"&#x000A;set :access_key_id, "ABCDE123456789"&#x000A;set :secret_access_key, "323848492AHSBCYEBDNCSCUENCCKS"&#x000A;set :pk, "pk-323848492AHSBCYEBDNCSCUENCCKS.pem"&#x000A;set :cert, "cert-323848492AHSBCYEBDNCSCUENCCKS.pem"&#x000A;set :packages, %w(apache2 subversion mysql-server libmysql-ruby less) # plus any additional packages you'd like to install on the image&#x000A;set :gems, %w(aws-s3 ezcrypto) #plus any additional gems you'd like to install on the instance</pre>
        <p>
          We'll set the
          <code>instance_id</code>
          and
          <code>instance_url</code>
          properties after we start an instance. The value for the
          <code>keypair</code>
          property must be the name of the RSA keypair in
          <code>$HOME/.ec2</code>.
          So, if your keypair file is named
          <code>id_rsa-gsp-keypair</code>,
          the
          <code>keypair</code>
          property value should be
          <code>gsp-keypair</code>.
          The
          <code>account_id</code>,
          <code>access_key_id</code>
          and
          <code>secret_access_key</code>
          are your AWS ACCOUNT ID, ACCESS KEY ID and SECRET ACCESS KEY.
          <code>pk</code>
          and
          <code>cert</code>
          are the filenames of the PEM certificate and key in
          <code>$HOME/.ec2</code>.
        </p>
        <p>
          If your Subversion repository is using HTTP Basic authentication, add the following two lines in
          <code>config/deploy.rb</code>:
        </p>
        <pre>&#x000A;set :scm_username, 'svnusername'&#x000A;set :scm_password, 'svnpassword'</pre>
        <h3>Deploy the application</h3>
        <p>
          Start a Debian Etch AMI:
        </p>
        <pre>&#x000A;cap instance:start</pre>
        <p>
          Wait a few moments and invoke
          <code>ec2-describe-instances</code>.
          Once your instance has been started, the output of the
          <code>ec2-describe-instances</code>
          command will provide the instance id and instance url. Set these values in
          <code>config/deploy.rb</code>:
        </p>
        <pre>&#x000A;set :instance_id, "i-sd92adsd"&#x000A;set :instance_url, "ec2-67-202-1-72.z-2.compute-1.amazonaws.com"</pre>
        <p>
          If you don't have a copy of your public RSA key, invoke:
        </p>
        <pre>&#x000A;cap instance:cp_public_key</pre>
        <p>
          This will copy you public RSA key from the instance to your
          <code>$HOME/.ec2</code>
          directory.
        </p>
        <pre>&#x000A;cap instance:bootstrap</pre>
        <p>
          This command will take a while to complete. It effectively installs RubyWorks, the
          <a href="http://amazon.rubyforge.org">AWS::S3</a>
          library, copies your amazon keys, database backup and restore utitilies, installs Apache 2, sets up an Apache virtual host, installs Subversion and MySQL on the instance. It sets up a cron job for backing up the Database on Amazon S3 every 40 minutes and  restores the database to the latest version found on S3, if any exist, otherwise creates a database named
          <code>&lt;application&gt;_production</code>
          where
          <code>application</code>
          is the value of the
          <code>application</code>
          property in
          <code>config/deploy.rb</code>.
        </p>
        <p>
          After the command completes, you should be able to navigate to the instance's URL from a browser and see the Rails welcome page.
        </p>
        <p>
          Proceed by invoking
          <code>cap deploy</code>
          and, if this is the first time you're deploying your application, you might want to do a
          <code>cap deploy:migrate</code>.
        </p>
        <p>
          To perform a remote login to the instance, invoke:
        </p>
        <pre>&#x000A;cap instance:ssh</pre>
        <p>
          To back up the database to S3:
        </p>
        <pre>&#x000A;cap db:backup</pre>
        <p>
          To backup the image to S3 (bundle, upload and register), invoke:
        </p>
        <pre>&#x000A;cap image:backup</pre>
        <p>
          To monitor services running on the instance:
        </p>
        <pre>&#x000A;cap monit:status</pre>
        <p>
          To stop the instance:
        </p>
        <pre>&#x000A;cap instance:stop</pre>
        <h3>Acknowledgments</h3>
        <p>
          rubyworks-ec2 uses Paul Morris's public Debian Etch AMI (<em>ami-30f11459</em>).
        </p>
        <h3>License</h3>
        <p>
          rubyworks-ec2 is copyright © 2007
          <a href="http://nutrun.com" title="nutrun.com">nutrun.com</a>.
          rubyworks-ec2 is Open Source Software -
          <a href="http://nutrun.com/rwec2/license.txt">LICENSE</a>
        </p>
        <p>
          RubyWorks and the RubyWorks Production Stack are ©
          <a href="http://thoughtworks.com">ThoughtWorks</a>
          inc.
        </p>
        <p>
          <a href="http://www.amazon.com/AWS-License-home-page-Money/b/ref=sc_fe_c_0_201590011_8/102-2357457-4703359?ie=UTF8&amp;node=3440661&amp;no=201590011&amp;me=A36L942TSJ2AJA">
            Amazon Web Services
            <small>
              <sup>TM</sup>
            </small>
            Customer Agreement
          </a>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  TextMate: On the fly JavaScript evaluation with Rhino</title>
    <link href="http://nutrun.com/weblog/2007/10/28/textmate-on-the-fly-javascript-evaluation-with-rhino.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/10/28/textmate-on-the-fly-javascript-evaluation-with-rhino.html</id>
    <updated>2007-10-28T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 28 2007</span>
        </div>
        <h2 class="title">TextMate: On the fly JavaScript evaluation with Rhino</h2>
        <p>
          For those interested in developing JavaScript outside the browser,
          <a href="http://www.mozilla.org/rhino/" title="Rhino - JavaScript for Java">Rhino</a>
          is one of the natural choices. It seems to combine the best of both the dynamicaly and statically typed worlds. Rhino offers a Shell for dynamic script evaluation, along with the option to compile the scripts into Java classes and reap any advantages compiled software has on display. It's a mature platform, built with performance in mind, leveraging a robust VM.
        </p>
        <p>
          In order to evaluate scripts using Rhino in
          <a href="http://macromates.com/" title="TextMate">TextMate</a>
          in a similar fashion to that of the Run command (<code>"cmd R"</code>) from the Ruby Bundle:
        </p>
        <p>
          Provided that Java is installed on the system and the
          <code>$JAVA_HOME</code>
          environment variable has been set,
          <a href="http://www.mozilla.org/rhino/download.html" title="Rhino Downloads">download Rhino</a>,
          unpack it somewhere and set an environment variable (<code>$RHINO_HOME</code>) to point to the unpacked Rhino distribution directory. I keep these environment variables in
          <code>~/.profile</code>.
          Open the Bundle Editor in TextMate, navigate to
          <em>JavaScript</em>
          and add a new Command. From the
          <em>Save</em>
          drop-down, pick
          <em>Current File</em>,
          set
          <em>Input</em>
          to
          <em>Entire Document</em>,
          <em>Output</em>
          to
          <em>Show as Tool Tip</em>
          and
          <em>Activation</em>
          to
          <em>Key Equivalent</em>.
          I chose
          <code>"cmd E"</code>
          as the hot-key for invoking the Command.
        </p>
        <p>
          Here's the script for the
          <em>Command(s)</em>
          input:
        </p>
        <pre>&#x000A;echo Evaluating : "$TM_FILEPATH"&#x000A;echo&#x000A;echo&#x000A;$JAVA_HOME/bin/java -classpath $RHINO_HOME/js.jar \&#x000A;org.mozilla.javascript.tools.shell.Main -f $1 "$TM_FILEPATH"</pre>
        <p>
          Sample output:
        </p>
        <p>
          <a href="http://www.flickr.com/photos/nutrun/1775217917/" title="Photo Sharing">
            <img alt="textmate-rhino-js" height="241" src="http://farm3.static.flickr.com/2330/1775217917_1050b14ade_o.png" style="border: 1px solid black; padding: 3px;" width="512" />
          </a>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Queueue version 0.0.4</title>
    <link href="http://nutrun.com/weblog/2007/10/20/queueue-version-0.0.4.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/10/20/queueue-version-0.0.4.html</id>
    <updated>2007-10-20T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 20 2007</span>
        </div>
        <h2 class="title">Queueue version 0.0.4</h2>
        <p>
          A new version of
          <a href="http://nutrun.com/q/" title="Queueue: A portable Amazon Simple Queue Service stub in Ruby">Queueue</a>
          is available for download.
        </p>
        <p>
          This is mostly a maintenance release. The HTTP header date is now validated based on the format required by AWS SQS. An example valid header date would be:
          <em>Sat, 20 Oct 2007 14:45:15 BST</em>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Queueue turns 0.0.3</title>
    <link href="http://nutrun.com/weblog/2007/10/01/queueue-turns-0.0.3.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/10/01/queueue-turns-0.0.3.html</id>
    <updated>2007-10-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 01 2007</span>
        </div>
        <h2 class="title">Queueue turns 0.0.3</h2>
        <p>
          A new version of
          <a href="http://nutrun.com/q/" title="Queueue: A portable Amazon Simple Queue Service stub in Ruby">Queueue</a>
          (0.0.3) is
          <a href="http://nutrun.com/q/#download" title="Download queueue-0.0.3">available for download</a>.
        </p>
        <h4>New in this version</h4>
        <p>
          The Queueue::QueueService API can be
          <a href="http://nutrun.com/q/#embedding" title="Queueue: A portable Amazon Simple Queue Service stub in Ruby">embedded</a>
          in Ruby programs and used independently from its Mongrel backed, RESTFul HTTP interface.
        </p>
        <p>
          <a href="http://nutrun.com/q/rdoc">RDoc</a>
          for Queueue::QueueService and related assets.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Embedding Queueue</title>
    <link href="http://nutrun.com/weblog/2007/10/01/embedding-queueue.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/10/01/embedding-queueue.html</id>
    <updated>2007-10-01T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Oct 01 2007</span>
        </div>
        <h2 class="title">Embedding Queueue</h2>
        <p>
          As of
          <a href="http://nutrun.com/q/#download" title="Download queueue-0.0.3">version 0.0.3</a>,
          <a href="http://nutrun.com/q/" title="Queueue: A portable Amazon Simple Queue Service stub in Ruby">Queueue</a>
          can be embedded in Ruby code through its QueueService interface. In this mode, Queueue could be used as a
          <em>simple</em>
          alternative for instrumenting message driven Ruby code.
        </p>
        <pre>&#x000A;require "rubygems"&#x000A;require "queueue"&#x000A;&#x000A;QUEUE_NAME = "queue"&#x000A;SERVICE = Queueue::QueueService.new&#x000A;&#x000A;SERVICE.create_queue QUEUE_NAME&#x000A;SERVICE.set_visibility_timeout QUEUE_NAME, 5&#x000A;&#x000A;listener = Thread.new do&#x000A;  loop do&#x000A;    messages = SERVICE.receive_message QUEUE_NAME&#x000A;    messages.each do |msg|&#x000A;      p msg.body&#x000A;      SERVICE.delete_message QUEUE_NAME, msg.message_id&#x000A;    end&#x000A;  end&#x000A;end&#x000A;&#x000A;talker = Thread.new do&#x000A;  %w(We've been dancing with Mr Brownstone).each do |msg|&#x000A;    SERVICE.send_message QUEUE_NAME, msg&#x000A;    sleep 2&#x000A;  end&#x000A;  p "Done. Exiting running threads"&#x000A;  Thread.list.each { |t| t.exit! }&#x000A;end&#x000A;&#x000A;talker.join&#x000A;listener.join</pre>
        <p>
          Another interesting scenario can involve
          <code>QueueService</code>
          combined with
          <a href="http://www.ruby-doc.org/stdlib/libdoc/drb/rdoc/index.html" title="drb: Ruby Standard Library Documentation">DRb</a>
          as a means to instrumenting distributed Ruby processes.
        </p>
        <p>
          An instance of
          <code>QueueService</code>
          wrapped inside a DRb server:
        </p>
        <pre>&#x000A;require "drb"&#x000A;require "rubygems"&#x000A;require "queueue"&#x000A;&#x000A;DRb.start_service "druby://0.0.0.0:7777", Queueue::QueueService.new&#x000A;DRb.thread.join</pre>
        <p>
          And DRb clients posting and consuming messages:
        </p>
        <pre>&#x000A;require "drb"&#x000A;require "rubygems"&#x000A;require "queueue"&#x000A;&#x000A;service = DRbObject.new nil, 'druby://0.0.0.0:7777'&#x000A;service.create_queue 'q'&#x000A;service.send_message 'q', "We've been dancing with Mr Brownstone"&#x000A;messages = service.receive_message 'q'&#x000A;messages.first.body # =&gt; "We've been dancing with Mr Brownstone"</pre>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rails Inline Fixtures</title>
    <link href="http://nutrun.com/weblog/2007/09/13/rails-inline-fixtures.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/09/13/rails-inline-fixtures.html</id>
    <updated>2007-09-13T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Sep 13 2007</span>
        </div>
        <h2 class="title">Rails Inline Fixtures</h2>
        <p>
          Rails
          <a href="http://rails.rubyonrails.com/classes/Fixtures.html" title="Class: Fixtures">Fixures</a>
          provide a way of organizing sample data to be used in tests. Traditionally, they reside under the
          <code>test/fixtures</code>
          directory of a Rails application.
        </p>
        <p>
          One of the nice things about fixtures is the declarative nature of their authoring and the simple syntax of their platform (<a href="http://www.yaml.org/" title="YAML Ain't Markup Language">YAML</a>). They are clear, easy to read, short and concise.
        </p>
        <p>
          One implication that results from using fixtures in accordance to the above strategy is that the data under test is not directly visible in the test itself, i.e. one needs to navigate to a different file to verify parts of the test's setup.
        </p>
        <p>
          At the same time, the more these fixtures start being shared by more and more tests, the more difficult it becomes to keep them organized in a way that makes one fixture's data directly appropriate for each of the tests that are using it. For example, a fixture,
          <code>songs.yml</code>,
          is being used by a unit test that requires two song entries, whereas the acceptance test for the songs page's pagination logic requires 25 songs to be created. The
          <code>fixtures :songs</code>
          directive in the song unit test will happily create 25 fixtures each time, 23 of which are never used.
        </p>
        <p>
          It might be useful to be able to declare fixtures inline on a per test or test case basis, while maintaining the effective, elegant syntax. The code bellow is an attempt to this direction.
        </p>
        [ruby]
        module InlineFixtures
        def delete_fixtures(table_name)
        ActiveRecord::Base.connection.delete "DELETE FROM #{table_name}", 'Fixture Delete'
        end
        def load_inline_fixtures(table_name_sym, inline_fixture)
        table_name = table_name_sym.to_s
        delete_fixtures table_name
        yaml_fixture = YAML.load inline_fixture
        yaml_fixture.values.map do |f|
        fixture = Fixture.new f, table_name
        ActiveRecord::Base.connection.execute "INSERT INTO `#{table_name}` (#{fixture.key_list}) VALUES (#{fixture.value_list})", 'Fixture Insert'
        end
        end
        alias :___ :load_inline_fixtures
        end
        [/ruby]
        <p>
          Including the
          <code>InlineFixtures</code>
          module allows for code that can be used anywhere inside a ruby script and looks like this:
        </p>
        [ruby]
        class SongTest
        This technique has proven to be particularly useful in our
        <a href="http://www.openqa.org/selenium-on-rails/" title="Selenium on Rails:">Selenium On Rails</a>
        tests (written in
        <a href="http://svn.openqa.org/fisheye/browse/~raw,r=1000/selenium-on-rails/selenium-on-rails/doc/classes/SeleniumOnRails/RSelenese.html" title="Class: SeleniumOnRails::RSelenese">rselenese</a>),
        as these tests commonly require the most elaborate database setup.
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rails View Adapter</title>
    <link href="http://nutrun.com/weblog/2007/09/07/rails-view-adapter.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/09/07/rails-view-adapter.html</id>
    <updated>2007-09-07T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Sep 07 2007</span>
        </div>
        <h2 class="title">Rails View Adapter</h2>
        <p>
          Closely related to the
          <a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html" title="Jay Fields Thoughts: Rails: Presenter Pattern">Presenter Pattern</a>,
          we have been recently applying a similar approach in order to achieve thinner Controllers responding with name/value pair based data, in order to achieve Views which are decoupled from the rest of our application's layers.
        </p>
        <p>
          The main ViewAdapter module looks something like this:
        </p>
        <pre>&#x000A;require "ostruct"&#x000A;&#x000A;module ViewAdapter&#x000A;  module ClassMethods&#x000A;    def prepare(records)&#x000A;      records.map do |record|&#x000A;        view_data = OpenStruct.new&#x000A;        yield view_data, record&#x000A;        view_data&#x000A;      end&#x000A;    end&#x000A;  end&#x000A;&#x000A;  extend ClassMethods&#x000A;&#x000A;  def self.included(receiver)&#x000A;    receiver.extend(ClassMethods)&#x000A;  end&#x000A;end</pre>
        <p>
          Each View Adapter includes the
          <code>ViewAdapter</code>
          module which allows for a clean, easily testable, declarative setup of the View Data that will be eventually rendered on the screen.
        </p>
        <pre>&#x000A;class ConcertViewAdapter&#x000A;  include ViewAdapter&#x000A;&#x000A;   def concerts&#x000A;     prepare Concert.find(:all) do |view_data, concert|&#x000A;       view_data.artist = concert.artist&#x000A;       view_data.venue = concert.venue&#x000A;       view_data.price = concert.currency + concert.price&#x000A;     end&#x000A;   end&#x000A;end</pre>
        <p>
          As a general rule, we maintain a one-to-one relationship between the Controllers and the corresponding View Adapters.
        </p>
        <pre>&#x000A;class ConcertsController &lt; ApplicationController&#x000A;  def index&#x000A;    @concerts = ConcertViewAdapter.concerts&#x000A;  end&#x000A;end</pre>
        <p>
          These Adapters are mainly used to consolidate and format data, as returned by a Controller's action, for display.
        </p>
        <h3>Advantages/Trade-offs</h3>
        <p>
          Distinct decoupling of the View from the rest of the application layers which provides a single, well known point of maintenance to accommodate easy code changes or refactorings.
        </p>
        <p>
          Established codebase location for view logic and formatting operations. Particularly useful for internationalization.
        </p>
        <p>
          Easily testable. Tests for the View Adapters can run as part of a
          <a href="http://nutrun.com/weblog/rails-fast-test-suite/" title="Nutrun  » Blog Archive   » Rails fast test suite">Fast Rails Test Suite</a>
          because they don't require any Rails environment setup.
        </p>
        <p>
          As a possible downside, this approach will break some of the standard Rails view helpers which depend on ActiveRecord objects being exposed in ERB templates. I personally do not consider this a big issue, because I don't find much benefit in most of these HTML helpers, especially considering the way they cross MVC boundaries by exposing Domain Objects to the View, or mask relatively straightforward mark up.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Queueue version 0.0.2 released</title>
    <link href="http://nutrun.com/weblog/2007/08/29/queueue-version-0.0.2-released.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/08/29/queueue-version-0.0.2-released.html</id>
    <updated>2007-08-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 29 2007</span>
        </div>
        <h2 class="title">Queueue version 0.0.2 released</h2>
        <p><a href="http://nutrun.com/q" title="queueue-0.0.2">Version 0.0.2 of Queueue</a>, the portable Amazon SQS server stub, is available for
          <a href="http://nutrun.com/q#download">download</a>.
        </p>
        <p>
          As of this release Queueue supports
          <em>single user authentication</em>.
          Authentication credentials can be set up in a configuration file named
          <code>queueue.yml</code>
          which must be found in the same location where the
          <code>queueue</code>
          start up script is invoked from. The contents of the file should look like this:
        </p>
        <pre>&#x000A;host: 127.0.0.1&#x000A;port: 2323&#x000A;access_key_id: iamtheworldthathides&#x000A;secret_access_key: theuniversalsecretofalltime</pre>
        <p>
          In the absence of the above configuration file, the default value will be
          <em>queueue</em>
          for both the Access Key ID and the Secret Access Key.
        </p>
        <p>
          Note: The
          <code>access_key_id</code>
          value is actually ignored, since only a single user is supported. It is there as a placeholder for possible multi-user support in the future.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Queueue, a portable Amazon SQS stub in Ruby</title>
    <link href="http://nutrun.com/weblog/2007/08/09/queueue,-a-portable-amazon-sqs-stub-in-ruby.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/08/09/queueue,-a-portable-amazon-sqs-stub-in-ruby.html</id>
    <updated>2007-08-09T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Aug 09 2007</span>
        </div>
        <h2 class="title">Queueue, a portable Amazon SQS stub in Ruby</h2>
        <p>
          <em>
            Update (Oct 20, 2007):
            <a href="http://nutrun.com/weblog/queueue-version-004/">Queueue version 0.0.4 is out</a>
          </em>
        </p>
        <p>
          <em>
            Update (Oct 1, 2007):
            <a href="http://nutrun.com/weblog/queueue-turns-003">Queueue version 0.0.3 is out</a>
          </em>
        </p>
        <p>
          <em>
            Update:
            <a href="http://nutrun.com/weblog/queueue-version-002-released">Queueue version 0.0.2 is out</a>
          </em>
        </p>
        <p>
          <a href="http://nutrun.com/q" title="Queueue">Queueue</a>
          is a Ruby implementation of the
          <a href="http://aws.amazon.com/sqs">AWS SQS</a>
          (Amazon Simple Queue Service) server
          <a href="http://docs.amazonwebservices.com/AWSSimpleQueueService/2006-04-01/REST_RestOperations.html">REST API</a>.
        </p>
        <p>
          You can download and read about it at the
          <a href="http://nutrun.com/q" title="Queueue">Queueue page</a>.
        </p>
        <p>
          As it stands, Queueue should support the SQS REST API, bar
          <strike>authentication and</strike>
          multi user support. Single user authentication is supported as of version 0.0.2. Error messages would also look slightly different, although validation, error codes and error formats should be identical.
        </p>
        <p>
          At the moment, queues and messages on Queueue are not persisted, only stored in memory and are gone when the service is shut down.
        </p>
        <p>
          Do bare in mind that these are early days in Queueue's development, so everything might not work as expected. I would appreciate any notifications of Queueue acting up.
        </p>
        <p>
          I will be posting updates regarding Queueue's development status here, so feel free to
          <a href="http://nutrun.com/feed/">subscribe</a>
          if you'd like to be kept posted on Queueue's development and subsequent releases.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Rails fast test suite</title>
    <link href="http://nutrun.com/weblog/2007/07/31/rails-fast-test-suite.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/07/31/rails-fast-test-suite.html</id>
    <updated>2007-07-31T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 31 2007</span>
        </div>
        <h2 class="title">Rails fast test suite</h2>
        <p>
          Rails convention suggests Model classes that traditionally extend ActiveRecord::Base with the corresponding unit tests depending on the database. I prefer to separate the business from the data access layers by having a few ActiveRecord children handling persistence (not unlike
          <a href="http://www.martinfowler.com/eaaCatalog/repository.html" title="P of EAA: Repository">repositories</a>)
          with the bulk of the application logic residing in classes that are unaware of the database.
        </p>
        <p>
          I find it useful to add a separate test suite for handling the tests for those classes by creating a new directory, e.g.
          <code>test/fastunit</code>
          and a Rake test task (<code>lib/tasks/fastunit.rake</code>) that runs the tests in it.
        </p>
        <pre>&#x000A;namespace :test do&#x000A;  Rake::TestTask.new('fastunit') do |t|&#x000A;    t.pattern = 'test/fastunit/*_test.rb'&#x000A;  end&#x000A;end&#x000A;&#x000A;Rake::Task[:test].prerequisites</pre>
        <p>
          Adding
          <code>test:fastunit</code>
          to the prerequisites of the main
          <code>test</code>
          task ensures the suite will be ran as part of the full test build.
        </p>
        <p>
          One of the advantages to this approach is the instant feedback of running
          <code>rake test:fastunit</code>
          - these tests are inherently faster. I run these tests often whilst developing to ensure things are going smoothly and only run the full build before checkins.
        </p>
        <p>
          This technique renders the built-in
          <code>test:units</code>
          task slightly ambiguous as ActiveRecord tests are now presented more like functional tests, which is not entirely incorrect, because they do, after all, hit the database.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Unobtrusive AJAX with jQuery and Rails</title>
    <link href="http://nutrun.com/weblog/2007/07/29/unobtrusive-ajax-with-jquery-and-rails.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/07/29/unobtrusive-ajax-with-jquery-and-rails.html</id>
    <updated>2007-07-29T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 29 2007</span>
        </div>
        <h2 class="title">Unobtrusive AJAX with jQuery and Rails</h2>
        <p>
          Whilst having become one of the de facto practices for rich web based user experience, AJAX presents a valuable method for web application performance optimization. In this article, I will be discussing using
          <a href="http://jquery.com" title="jQuery">jQuery</a>
          alongside Rails in an effort to create fast, responsive AJAX operations, while keeping the javascript as unobtrusive to the application's mark up as possible.
        </p>
        <p>
          Let's start by creating a new Rails project with one Model,
          <code>Bookmark</code>
          that has one property,
          <code>link</code>.
        </p>
        <pre>&#x000A;rails -d sqlite3 bookmarks&#x000A;cd bookmarks&#x000A;script/generate model Bookmark link:string&#x000A;script/generate controller Bookmarks&#x000A;rake db:migrate</pre>
        <p>
          We create
          <code>app/views/layouts/bookmarks.rhtml</code>,
          the layout for the Bookmarks Controller where we can include the javascript libraries needed by the application. These are jQuery, the
          <a href="http://www.malsup.com/jquery/form/" title="jQuery Form Plugin">jQuery Form Plugin</a>
          and
          <code>application.js</code>
          which will contain any custom javascript we will be writing.
        </p>
        <pre>&#x000A;&lt;html&gt;&#x000A;&lt;head&gt;&#x000A;  &lt;meta http-equiv="Content-type" content="text/html; charset=utf-8"&gt;&#x000A;  &lt;title&gt;index&lt;/title&gt;&#x000A;  &lt;script type="text/javascript" src="/javascripts/jquery-1.1.3.1.pack.js"&gt;&lt;/script&gt;&#x000A;  &lt;script type="text/javascript" src="/javascripts/jquery.form.js"&gt;&lt;/script&gt;&#x000A;  &lt;script type="text/javascript" src="/javascripts/application.js"&gt;&lt;/script&gt;&#x000A;&lt;/head&gt;&#x000A;&lt;body&gt;&#x000A;&lt;%=yield%&gt;&#x000A;&lt;/body&gt;&#x000A;&lt;/html&gt;</pre>
        <p>
          Next, we add
          <code>app/views/bookmarks/index.rhtml</code>
          and one partial,
          <code>app/views/bookmarks/_bookmarks_list.rhtml</code>
          which will contain the list of bookmarks that will be updated with AJAX calls to the controller's methods.
        </p>
        <pre>&#x000A;&lt;form method="post" action="/bookmarks/add" id="add-bookmark"&gt;&#x000A;  &lt;label for="bookmark-link"&gt;Bookmark:&lt;/label&gt;&#x000A;  &lt;input type="text" name="bookmark[link]" id="bookmark-link"/&gt;&#x000A;  &lt;input type="submit" value="Add"&gt;&#x000A;&lt;/form&gt;&#x000A;&lt;div id="bookmarks-list"&gt;&#x000A;  &lt;%= render :partial =&gt; 'bookmarks_list'%&gt;&#x000A;&lt;/div&gt;</pre>
        <pre>&#x000A;&lt;% unless @bookmarks.empty? %&gt;&#x000A;&lt;ul&gt;&#x000A;  &lt;% for b in @bookmarks %&gt;&#x000A;  &lt;li&gt;&#x000A;    &lt;a href="&lt;%= b.link %&gt;"&gt;&lt;%= b.link %&gt;&lt;/a&gt;&#x000A;    &lt;a href="/bookmarks/delete/&lt;%= b.id %&gt;" class="delete"&gt;delete&lt;/a&gt;&#x000A;  &lt;/li&gt;&#x000A;  &lt;%end%&gt;&#x000A;&lt;/ul&gt;&#x000A;&lt;% end %&gt;</pre>
        <p>
          Below is a simplified version of the Controller that handles server side support for
          <code>add</code>
          and
          <code>delete</code>
          operations.
        </p>
        <pre>&#x000A;class BookmarksController &lt; ApplicationController&#x000A;  def index&#x000A;    @bookmarks = Bookmark.find(:all)&#x000A;  end&#x000A;&#x000A;  def add&#x000A;    if Bookmark.create(params[:bookmark]).valid?&#x000A;      @bookmarks = Bookmark.find(:all)&#x000A;      render :partial =&gt; "bookmarks_list"&#x000A;    else&#x000A;      render :text =&gt; "Oops...", :status =&gt; "500"&#x000A;    end&#x000A;  end&#x000A;&#x000A;  def delete&#x000A;    Bookmark.destroy(params[:id])&#x000A;    @bookmarks = Bookmark.find(:all)&#x000A;    render :text =&gt; ""&#x000A;  end&#x000A;end</pre>
        <p>
          By rendering partials we are only updating a desired target sub-section of the mark up, cutting down the response content to a bare minimum and by doing so we should achieve a performance boost. Specifying a 500 HTTP error status code when things go wrong will allow our javascript to interpret a response as problematic.
        </p>
        <p>
          Finally, here's the javascript for adding and deleting bookmarks and displaying error messages.
        </p>
        <pre>&#x000A;function hijackDeleteBookmarkLinks() {&#x000A;  $('#bookmarks-list a.delete').bind('click', function() {&#x000A;    var deleteLink = $(this)&#x000A;    $.ajax({&#x000A;      type: 'POST',&#x000A;      url: deleteLink.attr('href'),&#x000A;      success: function(){deleteLink.parent().remove()}&#x000A;    })&#x000A;    return false&#x000A;  })&#x000A;}&#x000A;&#x000A;function hijackAddBookmarkForm() {&#x000A;  $('#add-bookmark').submit(function() {&#x000A;    $(this).ajaxSubmit({&#x000A;      target: '#bookmarks-list',&#x000A;      clearForm: true,&#x000A;      success: hijackDeleteBookmarkLinks,&#x000A;      error: displayError&#x000A;    })&#x000A;    return false&#x000A;  })&#x000A;}&#x000A;&#x000A;function displayError(request, errorType) {&#x000A;  var msg = '&lt;div class="error"&gt;'+request.responseText+'(click to close)&lt;/div&gt;'&#x000A;  $('#bookmarks-list').append(msg)&#x000A;  $('.error').click(function(){$(this).hide()})&#x000A;}&#x000A;&#x000A;$(function() {&#x000A;  hijackAddBookmarkForm()&#x000A;  hijackDeleteBookmarkLinks()&#x000A;})</pre>
        <p>
          The
          <code>hijackDeleteBookmarkLinks</code>
          function intercepts click events on any link with class
          <code>delete</code>
          inside the
          <code>bookmarks-list</code>
          div and makes an asynchronous call to the link's original URL. Subsequent to a successful response, we dynamically remove the link list entry from the mark up.
        </p>
        <p>
          It is worth noting the value of the
          <code>url</code>
          option to any of our AJAX calls. This should allow us to modify the request URL to anything  we like, meaning that we can have different actions corresponding to AJAX or non AJAX calls, making the application work as expected even if javascript is not available on the client. I have omitted this step for the sake of simplicity.
        </p>
        <p>
          The
          <code>target</code>
          option in
          <code>hijackAddBookmarkForm</code>
          specifies the element to be updated with the contents of the response to the AJAX call. Also, we need to call
          <code>hijackDeleteBookmarkLinks</code>
          on the success of the AJAX call to ensure that any newly created links are bound by the function.
        </p>
        <h4>Issues to consider</h4>
        <p>
          The example has been simplified for demonstration purposes.
        </p>
        <p>
          The proposed architecture tightly couples the client-side with the server-side implementation of the application. We are writing actions intended to be used solely by javascript and the javascript itself expects partial HTML to be returned by the responses. The API is nowhere near being RESTful.
        </p>
        <p>
          We could have separate actions responsible for deleting, creating and listing bookmarks. Those actions could also return something more flexible, like JSON. The reason I chose to have
          <code>create</code>
          returning the updated list of bookmarks as part of the
          <code>create</code>
          response is to avoid the second request-response roundtrip that would incur if creation and listing were separated. I favored partials over JSON to avoid having to operate on the response. This allows for simpler javascript.
        </p>
        <p>
          It pays to consider the purpose of the API and based on that decide to compromise some core values in favor of others. When writing the piece of code that inspired this article my goal was not to create a public RESTful API. This code was UI driven and the intention was to create a rich, fast user interface that would work as expected both with javascript turned on or off.
        </p>
        <p>
          As a side-note, I chose not to use Rails'
          <a href="http://api.rubyonrails.com/classes/ActionController/MimeResponds/InstanceMethods.html#M000080" title="Module: ActionController::MimeResponds::InstanceMethods">respond_to</a>
          method because I prefer actions (methods in general) that are responsible for doing one thing. This might introduce some duplication and any maintenance issues that come along with it, but in my case the actions had enough differences to justify breaking them up. This is a personal preference and not meant to discourage anyone from using
          <code>respond_to</code>.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            If planning to get IT certification then join online
            <a href="http://www.testkings.com/exam/350-029.htm">testking 350-029</a>
            training program and get guaranteed success in real exam using
            <a href="http://www.testkings.com/exam/70-662.htm">testking 70-662</a>
            study material and
            <a href="http://www.testkings.com/exam/70-290.htm">testking 70-290</a>
            tutorials.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Amazon S3 persistent Ruby objects</title>
    <link href="http://nutrun.com/weblog/2007/07/07/amazon-s3-persistent-ruby-objects.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/07/07/amazon-s3-persistent-ruby-objects.html</id>
    <updated>2007-07-07T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jul 07 2007</span>
        </div>
        <h2 class="title">Amazon S3 persistent Ruby objects</h2>
        <p>
          I have occasionally participated in conversations around the subject of the database as a product with an expiry date, destined to eventually be replaced by highly distributed data storage models. Given the current technological state, this sounds much a like science fiction scenario, but services like
          <a href="http://aws.amazon.com/s3">AWS S3</a>
          bring the idea closer to science and further from fiction.
        </p>
        <p>
          Although S3's data storage and retrieval model looks presently better suited for larger units of data (e.g. media content), it would be interesting to investigate how it could be applied as an Object persistence service.
        </p>
        <p>
          In the following example, we will use Ruby's
          <a href="http://amazon.rubyforge.org/">AWS::S3</a>
          library to create a class resembling Ruby on Rails' ActiveRecord::Base, allowing Objects to be persisted to and retrieved from an S3 Bucket.
        </p>
        <p>
          Objects need to be somehow serialized and de-serialized in order to be successfully stored and retrieved from S3.
          <a href="http://www.yaml.org/">YAML</a>
          is one of the standard means to object serialization in Ruby, so we will be making use of it.
        </p>
        <pre>&#x000A;require 'yaml'&#x000A;require 'aws/s3'&#x000A;&#x000A;class S3Record&#x000A;  attr_accessor :id&#x000A;&#x000A;  def initialize(attrs = {})&#x000A;    attrs.each { |k, v| instance_eval "self.#{k} = v" }&#x000A;  end&#x000A;end</pre>
        <p>
          Requiring YAML provides
          <code>S3Record</code>
          with, among other functionality, a
          <code>to_yaml</code>
          instance method.
        </p>
        <p>
          Next, we add the ability to persist an instance of
          <code>S3Record</code>
          to S3.
        </p>
        <pre>&#x000A;def create&#x000A;  AWS::S3::S3Object.find(@id, self.class.name)&#x000A;  raise "Object with key [] already exists"&#x000A;rescue AWS::S3::NoSuchKey&#x000A;  AWS::S3::S3Object.store(@id, self.to_yaml, self.class.name)&#x000A;end</pre>
        <p>
          The first parameter to the
          <code>AWS::S3::S3Object#find</code>
          method is the unique identifier by which the Object will be keyed when stored and will be the one used to find the object. The second parameter is the name of the Bucket in which the object will be stored. Here, we use the name of our class as the bucket name. This implies that a bucket with a matching name to this of our class must exist before we can start storing objects.
        </p>
        <p>
          The AWS API will raise a
          <code>NoSuchKey</code>
          error in the case where the specified key does not exist in the specified bucket. We make use of this in order to ensure that we will not be overwriting any existing objects. Also, note the call to
          <code>self.to_yaml</code>.
          This is the actual data of the Object as it is being stored in S3.
        </p>
        <p>Next, we provide the ability to retrieve objects.</p>
        <pre>&#x000A;def self.find(id)&#x000A;  YAML.load(AWS::S3::S3Object.find(id, self.name).value)&#x000A;end&#x000A;&#x000A;def self.find_all(options = {})&#x000A;  bucket = AWS::S3::Bucket.find(self.name, options)&#x000A;  bucket.objects.map { |s3_obj| YAML.load(s3_obj.value) }&#x000A;end</pre>
        <p>
          We retrieve one object by its identifier and the name of its bucket (<code>AWS::S3::S3Object.find(id, self.name)</code>) and return it in its de-serialized form. The same applies to finding many objects from one Bucket. The
          <code>options</code>
          Hash accepts the following parameters:
          <code>:max_keys</code>
          - the maximum number of keys to retrieve,
          <code>:prefix</code>
          - restrict the response to contain results that begin with a specified prefix, and
          <code>:marker</code>
          - restrict the response to results that occur alphabetically after this value (see
          <a href="http://amazon.rubyforge.org/doc/classes/AWS/S3/Bucket.html#M000068">find (AWS::S3::Bucket)</a>).
        </p>
        <p>
          Methods to update, delete and count should be self explanatory.
        </p>
        <pre>&#x000A;def update&#x000A;  AWS::S3::S3Object.store(@id, self.to_yaml, self.class.name)&#x000A;end&#x000A;&#x000A;def self.delete(id)&#x000A;  AWS::S3::S3Object.delete(id, self.name)&#x000A;end&#x000A;&#x000A;def self.count&#x000A;  AWS::S3::Bucket.find(self.name).objects.size&#x000A;end</pre>
        <p>
          In action, we could operate on objects we would like to persist on S3 in a way similar to the following.
        </p>
        <pre>&#x000A;class Genre  1, :name =&gt; "rock")&#x000A;rock.create&#x000A;&#x000A;rock = Rock.find(1)&#x000A;rock.name = "heavy rock"&#x000A;rock.update&#x000A;&#x000A;#etc...</pre>
        <p>
          What about transactions? Indexing? More elaborate querying? All things databases are well established for? Bandwidth issues?
        </p>
        <p>
          There are probably no definitive answers to any of these questions, although one could suggest that transaction management is not that hard to implement, indexing can happen - often more efficiently - outside the database (see
          <a href="http://lucene.apache.org/">Lucene</a>,
          <a href="http://ferret.davebalmain.com/trac">Feret</a>)
          and bandwidth will not be an issue forever.
        </p>
        <p>
          A reason prohibiting the above example from being realistic is the present S3 billing model ($0.01 per 1,000 PUT or LIST requests, $0.01 per 10,000 GET and all other requests). It does not seem financially preferable for an application that will need to store and retrieve vast numbers of small resources in great frequency.
        </p>
        <p>
          The afore-mentioned costs are not applicable if the application is hosted on Amazon's
          <a href="http://aws.amazon.com/ec2">EC2 (Elastic Compute Cloud)</a>,
          as data transferred between Amazon S3 and Amazon EC2 is free of charge.
        </p>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Want to become networking expert?  Download the
            <a href="http://www.testkings.com/exam/642-813.htm">testking 642-813</a>
            dumps and
            <a href="http://www.testkings.com/exam/70-680.htm">testking 70-680</a>
            mock test to hit the real exam on first try. Also check out the latest
            <a href="http://www.testkings.com/exam/SY0-201.htm">testking SY0-201</a>
            practice questions for next exam.
          </p>
        </div>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Erubis</title>
    <link href="http://nutrun.com/weblog/2007/06/08/erubis.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/06/08/erubis.html</id>
    <updated>2007-06-08T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 08 2007</span>
        </div>
        <h2 class="title">Erubis</h2>
        <p>
          If you haven't heard of it already, or if you have and have yet to give it a spin, I strongly recommend
          <a href="http://www.kuwata-lab.com/erubis/" title="Erubis">Erubis</a>
          as an alternative to ERB for your Rails app. Setting it up is dead simple:
          <code>require 'erubis/helpers/rails_helper'</code>
          in
          <code>config/environment.rb</code>.
          We've been using it for all of our Rails projects for the last few months and have noticed a dramatic rendering speed bump.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Ruby Struct</title>
    <link href="http://nutrun.com/weblog/2007/05/21/ruby-struct.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/05/21/ruby-struct.html</id>
    <updated>2007-05-21T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 21 2007</span>
        </div>
        <h2 class="title">Ruby Struct</h2>
        <p>
          A
          <a href="http://www.ruby-doc.org/core/classes/Struct.html" title="Struct">Struct</a>
          in Ruby is a convenient and elegant way to bundle attributes together without having to write a class with explicit accessor methods.
        </p>
        <p>
          For example, let's look at a DTO used with a Rails ActionMailer class:
        </p>
        <pre>&#x000A;class EmailDto &lt; Struct.new(:full_name, :email, :date); end</pre>
        <p>
          So in a
          <code>Model</code>
          we can have something along the lines of:
        </p>
        <pre>&#x000A;class Account &lt; ActiveRecord::Base&#x000A;  def activate&#x000A;    self.active = true; self.save&#x000A;    dto = EmailDto.new(self.full_name, self.email, Time.now)&#x000A;    Notifier.deliver_activation_notification(dto)&#x000A;  end&#x000A;end</pre>
        <p>
          ... with a Notifier that looks like:
        </p>
        <pre>&#x000A;class Notifier &lt; ActionMailer::Base&#x000A;  def activation_notification(dto)&#x000A;    @recipients = dto.email&#x000A;    @from = "newsletters@example.com"&#x000A;    @subject = "Your account is now active!"&#x000A;    @body[:content] = dto&#x000A;  end&#x000A;end</pre>
        <p>
          An interesting, more flexible/dynamic alternative to Struct is
          <a href="http://www.ruby-doc.org/core/classes/OpenStruct.html" title="OpenStruct">OpenStruct</a>.
          OpenStruct allows the creation of data objects which accept arbitrary attributes at any time.
        </p>
        <pre>&#x000A;require 'ostruct'&#x000A;&#x000A;flexie = OpenStruct.new(:music =&gt; 'rock')&#x000A;flexie.bands = ['zep', 'sabbath']&#x000A;&#x000A;flexie.music # =&gt; "rock"&#x000A;flexie.bands.first # =&gt; "zep"</pre>
        <p>
          Of course, attributes can always be assigned blocks:
        </p>
        <pre>&#x000A;flexie.hello = Proc.new { puts 'hello world'}&#x000A;flexie.hello.call # =&gt; hello world</pre>
        <p>
          In many cases, Structs can offer a more meaningful, more concrete alternative to aspects of what Hashes are currently popular for in Ruby.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Illiterate programming</title>
    <link href="http://nutrun.com/weblog/2007/05/03/illiterate-programming.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/05/03/illiterate-programming.html</id>
    <updated>2007-05-03T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">May 03 2007</span>
        </div>
        <h2 class="title">Illiterate programming</h2>
        <cite>Programs must be written for people to read, and only incidentally for machines to execute.</cite>
        <p>
          The above citation from Harold Abelson and Gerald Jay Sussman's
          <em>Structure and Interpretation of Computer Programs</em>
          encapsulates the growing trend of what has for some time now been coined as
          <a href="http://en.wikipedia.org/wiki/Literate_programming" title="Literate Programming">Literate Programming</a>.
          Programming has come a long way since the days of Assembler in terms of human-friendliness, but, as with many other programming best practices making it into the mainstream, code literacy is often misunderstood and misused.
        </p>
        <p>
          I have to say at this point that I do not one hundred percent agree with the
          <em>"programs are meant to be read by people"</em>
          notion. That is because programs are written by and meant to be understood by a very narrow subset of People:
          <em>Programmers</em>.
        </p>
        <p>
          Naively making code
          <em>read like English</em>
          hides many dangers that could result in reducing productivity, making software less efficient or introducing bugs. That is, of course, not meant to be interpreted as
          <em>
            name your methods
            <code>chk_str_ptr()</code>
          </em>,
          more like
          <em>approach with caution</em>
          and
          <em>make your code meaningful to your peers (the other programmers) instead of someone who has never seen and is unlikely to ever see anything resembling code</em>.
        </p>
        <p>
          It is safe to assume that all developers are competent in their native tongue. Because writing code that reads like a spoken language is easier than writing
          <em>good</em>
          code, many developers tend to get carried away, shifting their main focus to that aspect of their work.
        </p>
        <p>
          Syntactic sugar (not the
          <a href="http://feeds.feedburner.com/~r/raganwald/~3/112871213/writing-programs-for-people-to-read.html">good kind</a>)
          often boils down to wrapping code that does the actual work. This, if not performed with great attention, usually results to adding a few extra layers of complexity for anyone trying to figure out what the code does. The moment something like
          <code>submit_the_payment_and_send_a_message_to_the_customer</code>
          <small>(spot the anti-pattern here?)</small>
          somehow doesn't send messages to the customer, while making a couple of redundant roundtrips to the database, we're in trouble.
        </p>
        <p>
          Expressive code does not necessarily share
          <em>that</em>
          many traits with what is considered to be expressive in a spoken language. Take Ruby, arguably one of the most expressive programming languages, for instance. What makes Ruby expressive is how it will enable a programmer to write code like
          <code>conditions ||= parameters.delete_if { |p| Customer.respond_to?(p) }</code>.
          This will probably not mean a lot to the average English speaker, it is however one of the reasons Ruby programmers are so passionate about the language.
        </p>
        <p>
          On the flip-side, Rails, one of the most semantically challenging APIs, suffers some performance issues, largely due to the efforts to make the API read and behave the way it does.
        </p>
        <p>
          Decorating code with the sole intention of making it resemble a spoken language violates the principle of
          <strong>Simplicity</strong>.
          Paul Graham describes this symptom very well in
          <a href="http://www.paulgraham.com/taste.html" title="Taste for Makers">Taste for Makers</a>:
        </p>
        <p>
          <cite>It seems strange to have to emphasize simplicity. You'd think simple would be the default. Ornate is more work. But something seems to come over people when they try to be creative. [...] When you're forced to be simple, you're forced to face the real problem. When you can't deliver ornament, you have to deliver substance.</cite>
        </p>
        <p>
          When coding, it pays to remember that good code primarily means
          <em>code that is as bug free, efficient, scalable and maintainable as possible</em>.
          Any other improvement must be sought after, but not if it compromises any of these core values.
        </p>
        <p>
          Elegant is the code that presents a simple solution to a complex problem, not the one that hides complexity behind a simplistic façade.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  Breakfast of Champions</title>
    <link href="http://nutrun.com/weblog/2007/04/22/breakfast-of-champions.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/04/22/breakfast-of-champions.html</id>
    <updated>2007-04-22T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Apr 22 2007</span>
        </div>
        <h2 class="title">Breakfast of Champions</h2>
        <img alt="Breakfast of Champions" src="http://farm1.static.flickr.com/168/468795840_8dd84b69c7.jpg?v=0" title="Breakfast of Champions" />
        <h3>The Champions' Ice Coffee</h3>
        You feel you have achieved something yesterday? Why not have a Breakfast of Champions?
        <strong>Ingredients:</strong>
        3 spoonfuls of crappy instant coffee, 1 spoonful of sugar, 10ml of milk, 1 trophy cup
      </div>
    </content>
  </entry>
  <entry>
    <title>  Heavy Metal Code</title>
    <link href="http://nutrun.com/weblog/2007/02/14/heavy-metal-code.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/02/14/heavy-metal-code.html</id>
    <updated>2007-02-14T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 14 2007</span>
        </div>
        <h2 class="title">Heavy Metal Code</h2>
        <img alt="Metal Code" src="http://farm1.static.flickr.com/188/389991224_fe8f4a56b2_o.jpg" title="Metal Code" />
        <p>
          Umlaut your varialbles for a cool heavy metal effect. It makes code better.
          Thanks
          <a href="http://erik.doernenburg.com/" title="Erik">Erik</a>.
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  IO Language Event Dispatcher</title>
    <link href="http://nutrun.com/weblog/2007/02/11/io-language-event-dispatcher.html" type="text/html" />
    <id>http://nutrun.com/weblog/2007/02/11/io-language-event-dispatcher.html</id>
    <updated>2007-02-11T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Feb 11 2007</span>
        </div>
        <h2 class="title">IO Language Event Dispatcher</h2>
        <p>
          Callbacks are a great way of keeping different Objects loosely coupled, without having to hard code direct references or calls between collaborators. Languages that support blocks/closures offer an elegant and flexible alternative to approaches of the Java
          <code>interface</code>
          style.
        </p>
        <pre>&#x000A;EventDispatcher := Object clone do(&#x000A;&#x000A;  listeners := Map clone&#x000A;&#x000A;  subscribe := method(event, callback,&#x000A;    listeners hasKey(event) ifFalse(listeners atPut(event, List clone))&#x000A;    listeners at(event) append(callback)&#x000A;  )&#x000A;&#x000A;  notify := method(event, args,&#x000A;    if(listeners hasKey(event),&#x000A;      listeners at(event) foreach(callback, callback call(args))&#x000A;    )&#x000A;  )&#x000A;)</pre>
        <p>
          The above
          <code>EventDispatcher</code>
          Object comes with two methods,
          <code>subscribe</code>
          and
          <code>notify</code>.
          The most interesting bit is how
          <code>subscribe</code>
          maps registered callbacks to their respective events. Upon notification (the
          <code>notify</code>
          method), every callback registered with the given event will execute.
        </p>
        <pre>&#x000A;factory := EventDispatcher clone do(&#x000A;  produceWidget := method(color,&#x000A;    "I am creating a #{color} widget" interpolate println&#x000A;    notify("new_widget", color)&#x000A;  )&#x000A;)</pre>
        <p>
          The code above signifies that every time the Factory produces a Widget, it will notify any listener interested in monitoring the production of new widgets. Interestingly, the factory knows nothing about listeners. IO scores some extra, not visible in this example, points by supporting Multiple Inheritance (sounds scary, but it's closer to Ruby's Mixins, rather than C++). Any ol' Object can have the
          <code>EventDispatcher</code>'s
          functionality available by adding
          <code>EventDispatcher</code>
          to it's list of
          <code>Protos</code>.
        </p>
        <p>
          Following is an example Listener that registers its intentions of being notified about the creation of new Widgets with the Factory.
        </p>
        <pre>&#x000A;widgetCounter :=  Object clone do(&#x000A;&#x000A;  counts := Map clone&#x000A;&#x000A;  factory subscribe("new_widget", block(color,&#x000A;      counts hasKey(color) ifFalse(counts atPut(color, 0))&#x000A;      counts atPut (color, counts at(color) nextInSequence)&#x000A;      "#{counts at (color)} #{color} widget(s)&#x000A;		created since I started listening" interpolate println&#x000A;    )&#x000A;  )&#x000A;)</pre>
        <p>
          Now, if the factory produces a few Widgets...
        </p>
        <pre>&#x000A;factory produceWidget("blue")&#x000A;factory produceWidget("green")&#x000A;factory produceWidget("blue")&#x000A;factory produceWidget("blue")&#x000A;factory produceWidget("red")</pre>
        <p>
          <code>widgetCounter</code>
          keeps track of the them, in respects to their colors...
        </p>
        <pre>&#x000A;~/Desktop $ io EventDispatcher.io&#x000A;I am creating a blue widget&#x000A;1 blue widget(s) created since I started listening&#x000A;I am creating a green widget&#x000A;1 green widget(s) created since I started listening&#x000A;I am creating a blue widget&#x000A;2 blue widget(s) created since I started listening&#x000A;I am creating a blue widget&#x000A;3 blue widget(s) created since I started listening&#x000A;I am creating a red widget&#x000A;1 red widget(s) created since I started listening</pre>
        <p>
          The example was inspired and is a port of the recipe described in chapter 7.11
          <cite>Coupling Systems Loosely with Callbacks</cite>
          found in
          <a href="http://www.oreilly.com/catalog/rubyckbk/" title="Ruby Cookbook">O'Reilly's Ruby Cookbook</a>
          by Lucas Carlson and Leonard Richardson
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <title>  You are not a ‘real’ Java developer until…</title>
    <link href="http://nutrun.com/weblog/2006/06/12/you-are-not-a-real-java-developer-until.html" type="text/html" />
    <id>http://nutrun.com/weblog/2006/06/12/you-are-not-a-real-java-developer-until.html</id>
    <updated>2006-06-12T00:00:00+00:00</updated>
    <content type="xhtml">
      <div class="article">
        <div>
          <span class="date">Jun 12 2006</span>
        </div>
        <h2 class="title">You are not a ‘real’ Java developer until…</h2>
        <p></p>
        <ul>
          <li>You had to use JDK 1.3 on a real project. In 2006.</li>
          <li>You had to use JDK 1.3 on a real project because you had to use some ancient version of WebSphere. In 2006. And you were already wondering who might ever want to use WebSphere back when JDK 1.3 was bleeding edge...</li>
          <li>
            You wanted to kill Java because it makes you do
            <code>Thread.currentThread().getContextClassLoader().getResourceAsStream()</code>
          </li>
          <li>And half of the time it doesn't work.</li>
          <li>Over time, you've used 15+ different ways to read-in a file from the context path. And most of the time you had to spend half a day to make it work.</li>
          <li>You missed Generics with a passion after you had to work with a JDK &lt; 1.5 for a while.</li>
          <li>You have your own start up just because you want to use Ruby instead of Java.</li>
          <li>You feel better for yourself when you hear that many people still use Struts.</li>
          <li>You try not to think that every single other programming language around these days opens, reads, and closes a file handle in three lines of code.</li>
          <li>You feel old when you consider that a native method that gets the free disk space on your hard drive has been requested eight years ago and it's almost here now...</li>
          <li>You have over-enginered Java code a dozen times to create functionality that resembles Ruby Code Blocks and Mix-ins.</li>
          <li>You have to come up with an interesting use for Annotations, like it wasn't bad enough already...</li>
          <li>Feel free to add your own...</li>
        </ul>
        <div class="sponsored">
          <p class="heading">Message from Testkings</p>
          <p>
            Join
            <a href="http://www.testkings.com/exam/646-204.htm">testking 646-204</a>
            online training program to keep up with latest technology and complete your certification with highest score using
            <a href="http://www.testkings.com/exam/70-642.htm">testking 70-642</a>
            study material and
            <a href="http://www.testkings.com/exam/640-822.htm">testking 640-822</a>
            tutorials.
          </p>
        </div>
      </div>
    </content>
  </entry>
</feed>
